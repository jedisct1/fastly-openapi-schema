openapi: 3.0.3
info:
  title: Fastly API
  description: |
    The Fastly API allows you to manage Fastly services via a REST-like interface.
    This API provides comprehensive control over Fastly CDN services, including configuration management,
    content purging, real-time analytics, and advanced edge computing features.
  version: "1.0"
  contact:
    name: Fastly Support
    url: https://www.fastly.com/support
    email: support@fastly.com
  license:
    name: MIT
  termsOfService: https://www.fastly.com/terms

servers:
  - url: https://api.fastly.com
    description: Fastly API production server

externalDocs:
  description: Fastly API Documentation
  url: https://developer.fastly.com/reference/api

security:
  - ApiKeyAuth: []

paths:
  /service:
    get:
      summary: List all services in account
      description: |
        Retrieves a paginated list of all Fastly services configured in the authenticated user's account.

        **Purpose**: Use this endpoint to discover all services you have access to, useful for service management, monitoring dashboards, or iterating through services for batch operations.

        **When to use**:
        - Initial service discovery
        - Building service management interfaces
        - Auditing service configurations
        - Preparing batch operations across multiple services

        **Response**: Returns an array of service objects with basic metadata including service ID, name, creation timestamps, and active version information.

        **Rate limiting**: This endpoint has standard rate limits. For large numbers of services, implement pagination handling.
      operationId: listServices
      tags:
        - Service
      parameters:
        - name: page
          in: query
          description: Page number for pagination (1-based indexing)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of services to return per page (max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [created, updated, name]
            default: created
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [ascend, descend]
            default: ascend
      responses:
        "200":
          description: Successfully retrieved list of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      per_page:
                        type: integer
                      record_count:
                        type: integer
                      total_count:
                        type: integer
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create a new service
      description: |
        Creates a new Fastly service configuration. A service is the top-level organizational unit in Fastly that contains all configurations for a specific application or website.

        **Purpose**: Establishes a new service container that will hold domains, backends, VCL configurations, caching rules, and other CDN settings.

        **Prerequisites**:
        - Valid API authentication
        - Sufficient account permissions
        - Available service quota in your account

        **Post-creation steps**:
        1. Add domains to the service
        2. Configure backend servers
        3. Set up caching rules and VCL logic
        4. Create and activate a service version

        **Important**: Newly created services are inactive by default. You must configure domains and backends, then activate a version to serve traffic.

        **Service naming**: Choose descriptive names as they appear in the Fastly control panel and logs.
      operationId: createService
      tags:
        - Service
      requestBody:
        description: Service configuration data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceCreate"
            examples:
              basic_service:
                summary: Basic service creation
                value:
                  name: "my-website-cdn"
                  comment: "CDN service for my website"
                  type: "vcl"
              ecommerce_service:
                summary: E-commerce service
                value:
                  name: "ecommerce-api-cdn"
                  comment: "High-performance CDN for e-commerce API endpoints"
                  type: "vcl"
        required: true
      responses:
        "201":
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Validation error - invalid service parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Service name must be unique"
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string

  /service/{service_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: Get detailed service information
      description: |
        Retrieves comprehensive information about a specific Fastly service, including configuration metadata, version details, and operational status.

        **Purpose**: Use this endpoint to inspect a service's current state, configuration summary, and deployment status before making changes or for monitoring purposes.

        **When to use**:
        - Before modifying service configurations
        - Checking current active version
        - Validating service existence and permissions
        - Gathering service metadata for documentation

        **Response includes**:
        - Service name, ID, and description
        - Active version number and timestamp
        - Creation and last modification dates
        - Customer/account association
        - Service type and paused state

        **Common use cases**:
        - Service configuration auditing
        - Pre-deployment validation
        - Dashboard status displays
        - Automated deployment scripts
      operationId: getService
      tags:
        - Service
      responses:
        "200":
          description: Successfully retrieved service details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
              examples:
                active_service:
                  summary: Active service with deployed version
                  value:
                    id: "SU1Z0isxPaozGVKXdv0eY"
                    name: "my-website-cdn"
                    comment: "Primary CDN for website"
                    customer_id: "x4xCwxxJxGCx123Rx5xTx"
                    type: "vcl"
                    active_version:
                      number: 3
                      deployed: true
                      locked: true
                    versions: 5
                    paused: false
                    created_at: "2023-01-15T10:30:00Z"
                    updated_at: "2023-06-20T14:45:00Z"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update service metadata
      description: |
        Updates the metadata and general configuration of an existing service. This endpoint modifies service-level properties but does not affect version-specific configurations.

        **Purpose**: Modify service name, description, or other metadata without affecting the deployed configuration.

        **What can be updated**:
        - Service name (must be unique within account)
        - Service comment/description
        - Customer assignment (if permissions allow)

        **What is NOT updated**:
        - Domains (use version-specific domain endpoints)
        - Backends (use version-specific backend endpoints)
        - VCL configurations (use version-specific VCL endpoints)
        - Active version (use version activation endpoint)

        **Important notes**:
        - Service name changes affect logging and monitoring displays
        - Updates do not require version activation
        - Changes are immediately visible in the control panel

        **Best practices**:
        - Use descriptive names for easier management
        - Update comments when making significant changes
        - Coordinate name changes with team members
      operationId: updateService
      tags:
        - Service
      requestBody:
        description: Updated service metadata
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceUpdate"
            examples:
              rename_service:
                summary: Rename service with updated description
                value:
                  name: "website-cdn-production"
                  comment: "Production CDN for main website - updated for new architecture"
              update_comment:
                summary: Update service description only
                value:
                  comment: "CDN service for marketing site - high cache TTL configuration"
        required: true
      responses:
        "200":
          description: Service metadata updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          description: Validation error - invalid service parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Service name must be unique"
    delete:
      summary: Permanently delete service
      description: |
        Permanently and irreversibly deletes a Fastly service and all associated configurations, including all versions, domains, backends, VCL code, and historical data.

        **⚠️ CRITICAL WARNING**: This operation is irreversible and immediately stops all traffic routing through this service.

        **What gets deleted**:
        - All service versions (active and inactive)
        - All configured domains
        - All backend definitions
        - All VCL configurations and snippets
        - All caching rules and headers
        - All logging configurations
        - Historical statistics and logs

        **Prerequisites before deletion**:
        1. Ensure no production traffic depends on this service
        2. Update DNS records to point away from Fastly
        3. Backup any custom VCL or configurations
        4. Notify team members of the deletion
        5. Consider service pausing as an alternative

        **Alternative approaches**:
        - Pause the service instead of deletion (reversible)
        - Remove domains while keeping service configuration
        - Deactivate service version while preserving configuration

        **Post-deletion effects**:
        - All requests to configured domains will fail
        - Service cannot be recovered or restored
        - Service ID becomes invalid for all API operations
        - Billing for this service stops immediately
      operationId: deleteService
      tags:
        - Service
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/domain:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: List domains
      description: List all domains for a service
      operationId: listDomains
      tags:
        - Domain
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Domain"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create domain
      description: Create a new domain for a service
      operationId: createDomain
      tags:
        - Domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domain"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/domain/{domain_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/domain_id"
    get:
      summary: Get domain details
      description: Get details of a specific domain
      operationId: getDomain
      tags:
        - Domain
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domain"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update domain
      description: Update a specific domain
      operationId: updateDomain
      tags:
        - Domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domain"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete domain
      description: Delete a specific domain
      operationId: deleteDomain
      tags:
        - Domain
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: List versions
      description: List all versions for a service
      operationId: listVersions
      tags:
        - Version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Version"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: Get version details
      description: Get details of a specific version
      operationId: getVersion
      tags:
        - Version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/activate:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    put:
      summary: Activate version
      description: Activates a specific service version, making it the production version that serves live traffic. Once activated, the version becomes locked and cannot be modified further without cloning. This is a critical operation that impacts production traffic, so it should be performed after thorough testing.
      operationId: activateVersion
      tags:
        - Version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/clone:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    put:
      summary: Clone version
      description: Clone a specific version
      operationId: cloneVersion
      tags:
        - Version
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/backend:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List backends
      description: List all backends for a service version
      operationId: listBackends
      tags:
        - Backend
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Backend"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create backend
      description: Create a new backend for a service version
      operationId: createBackend
      tags:
        - Backend
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackendCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backend"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/backend/{backend_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/backend_name"
    get:
      summary: Get backend details
      description: Get details of a specific backend
      operationId: getBackend
      tags:
        - Backend
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backend"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update backend
      description: Update a specific backend
      operationId: updateBackend
      tags:
        - Backend
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackendUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backend"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete backend
      description: Delete a specific backend
      operationId: deleteBackend
      tags:
        - Backend
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/purge_all:
    parameters:
      - $ref: "#/components/parameters/service_id"
    post:
      summary: Purge all content
      description: Immediately purges all cached content for a service across the global Fastly network. This operation is resource-intensive and should be used judiciously. It's useful for emergency situations where stale content must be removed immediately, such as after a significant data update or security incident. For more targeted cache invalidation, use surrogate keys or specific URL purges instead.
      operationId: purgeAll
      tags:
        - Purge
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /service/{service_id}/purge:
    parameters:
      - $ref: "#/components/parameters/service_id"
    post:
      summary: Purge by key
      description: Purges content from the Fastly cache by cache key or surrogate key. This is a flexible purging mechanism that allows for targeted invalidation of multiple related resources at once using a shared key. This is more efficient than purging individual URLs when groups of content need to be refreshed simultaneously.
      operationId: purgeByKey
      tags:
        - Purge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surrogate_keys:
                  type: array
                  description: List of surrogate keys to purge
                  items:
                    type: string
                  example: ["key1", "key2", "product_id_123"]
              required:
                - surrogate_keys
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurgeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /service/{service_id}/purge/{purge_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/purge_id"
    get:
      summary: Get purge status
      description: Checks the status of a previously initiated purge request. Purge requests are processed asynchronously across the Fastly network. This endpoint allows for monitoring the progress of a purge as it propagates through the global cache infrastructure.
      operationId: getPurgeStatus
      tags:
        - Purge
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurgeStatus"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/vcl:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List VCL files
      description: List all VCL files for a service version
      operationId: listVcls
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VCL"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create VCL file
      description: Create a new VCL file for a service version
      operationId: createVcl
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VCLCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VCL"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/cache_settings:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List cache settings
      description: List all cache settings for a service version
      operationId: listCacheSettings
      tags:
        - CacheSettings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CacheSetting"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create cache setting
      description: Create a new cache setting for a service version
      operationId: createCacheSetting
      tags:
        - CacheSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CacheSettingCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheSetting"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/cache_settings/{cache_setting_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/cache_setting_name"
    get:
      summary: Get cache setting
      description: Get a specific cache setting
      operationId: getCacheSetting
      tags:
        - CacheSettings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheSetting"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update cache setting
      description: Update a specific cache setting
      operationId: updateCacheSetting
      tags:
        - CacheSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CacheSettingUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheSetting"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete cache setting
      description: Delete a specific cache setting
      operationId: deleteCacheSetting
      tags:
        - CacheSettings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/dictionary:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List dictionaries
      description: List all edge dictionaries for a service version
      operationId: listDictionaries
      tags:
        - Dictionary
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dictionary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create dictionary
      description: Create a new edge dictionary for a service version
      operationId: createDictionary
      tags:
        - Dictionary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DictionaryCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dictionary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/dictionary/{dictionary_id}/items:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/dictionary_id"
    get:
      summary: List dictionary items
      description: List all items in an edge dictionary
      operationId: listDictionaryItems
      tags:
        - DictionaryItem
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DictionaryItem"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create dictionary item
      description: Create a new dictionary item
      operationId: createDictionaryItem
      tags:
        - DictionaryItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DictionaryItemCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DictionaryItem"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/acl:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List ACLs
      description: List all ACLs for a service version
      operationId: listAcls
      tags:
        - ACL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ACL"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create ACL
      description: Create a new ACL for a service version
      operationId: createAcl
      tags:
        - ACL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ACLCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ACL"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/acl/{acl_id}/entries:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/acl_id"
    get:
      summary: List ACL entries
      description: List all entries in an ACL
      operationId: listAclEntries
      tags:
        - ACLEntry
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ACLEntry"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create ACL entry
      description: Create a new ACL entry
      operationId: createAclEntry
      tags:
        - ACLEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ACLEntryCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ACLEntry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/healthcheck:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List health checks
      description: List all health checks for a service version
      operationId: listHealthchecks
      tags:
        - Healthcheck
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Healthcheck"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create health check
      description: Create a new health check for a service version
      operationId: createHealthcheck
      tags:
        - Healthcheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HealthcheckCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Healthcheck"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/logging/s3:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List S3 log endpoints
      description: List all S3 log endpoints for a service version
      operationId: listS3Logs
      tags:
        - Logging
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoggingS3"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create S3 log endpoint
      description: Create a new S3 log endpoint for a service version
      operationId: createS3Log
      tags:
        - Logging
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoggingS3Create"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingS3"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/waf:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: Get WAF settings
      description: Retrieves the Web Application Firewall (WAF) configuration for a specific service version. The WAF provides protection against common web vulnerabilities and attacks like SQL injection, cross-site scripting (XSS), and OWASP Top 10 threats. This endpoint returns the complete WAF configuration including rule status counts and associated conditions.
      operationId: getWafSettings
      tags:
        - WAF
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WAF"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create WAF
      description: Creates a new Web Application Firewall (WAF) configuration for a service version. The WAF provides protection against attacks like SQL injection, cross-site scripting, and other OWASP Top 10 threats. This endpoint provisions the initial WAF with default settings, which can then be customized through rule management endpoints. A prefetch condition must be specified to determine which requests are inspected by the WAF.
      operationId: createWaf
      tags:
        - WAF
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WAFCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WAF"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /service/{service_id}/version/{version_id}/rate-limiting:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List rate limiting configurations
      description: List all rate limiting configurations for a service version
      operationId: listRateLimits
      tags:
        - RateLimiting
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RateLimit"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create rate limiting
      description: Create a new rate limiting configuration for a service version
      operationId: createRateLimit
      tags:
        - RateLimiting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateLimitCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimit"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/rate-limiting/{rate_limit_id}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/rate_limit_id"
    get:
      summary: Get rate limit
      description: Get a specific rate limit configuration
      operationId: getRateLimit
      tags:
        - RateLimiting
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimit"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update rate limit
      description: Update a specific rate limit configuration
      operationId: updateRateLimit
      tags:
        - RateLimiting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateLimitUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimit"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete rate limit
      description: Delete a specific rate limit configuration
      operationId: deleteRateLimit
      tags:
        - RateLimiting
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /service/{service_id}/version/{version_id}/compute:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: Get Compute configuration
      description: Get Compute configuration for a service version
      operationId: getComputeConfig
      tags:
        - Compute
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputeConfig"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update Compute configuration
      description: Update Compute configuration for a service version
      operationId: updateComputeConfig
      tags:
        - Compute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputeConfigUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputeConfig"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /stats:
    get:
      summary: Get real-time stats
      description: Retrieves real-time stats for all services. This endpoint provides aggregated statistics about cache performance, bandwidth usage, and request handling across your entire Fastly account. Use this for global monitoring dashboards and cross-service analysis.
      operationId: getStats
      tags:
        - Stats
      parameters:
        - name: from
          in: query
          description: Timestamp from which to begin gathering stats (UTC)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Timestamp to end gathering stats (UTC)
          schema:
            type: string
            format: date-time
        - name: by
          in: query
          description: Duration of sample windows (day, hour, minute)
          schema:
            type: string
            enum: [day, hour, minute]
            default: day
        - name: region
          in: query
          description: Filter stats by geographic region
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Unprocessable Entity - Invalid parameters

  /service/{service_id}/stats/summary:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: Get service stats summary
      description: Retrieves a summary of statistics for a specific service. This endpoint returns aggregated data for high-level metrics like hits, misses, and bandwidth usage. It's useful for dashboards that need a quick overview of service performance without the granularity of time-series data.
      operationId: getServiceStatsSummary
      tags:
        - Stats
      parameters:
        - name: from
          in: query
          description: Timestamp from which to begin gathering stats (UTC)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Timestamp to end gathering stats (UTC)
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsSummary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/stats:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: Get service stats
      description: Retrieves detailed statistics for a specific service. This endpoint provides comprehensive time-series data on cache performance, origin shields, and content delivery metrics. Use this for detailed analysis of a service's performance over time, troubleshooting, and capacity planning.
      operationId: getServiceStats
      tags:
        - Stats
      parameters:
        - name: from
          in: query
          description: Timestamp from which to begin gathering stats (UTC)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Timestamp to end gathering stats (UTC)
          schema:
            type: string
            format: date-time
        - name: by
          in: query
          description: Duration of sample windows (day, hour, minute)
          schema:
            type: string
            enum: [day, hour, minute]
            default: day
        - name: region
          in: query
          description: Filter stats by geographic region
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/realtime:
    parameters:
      - $ref: "#/components/parameters/service_id"
    get:
      summary: Get real-time metrics
      description: Streams real-time metrics for a specific service. This endpoint provides up-to-the-second data on cache performance, request rates, and error rates. It's ideal for live dashboards, automated alerting systems, and immediate visibility into the impact of configuration changes or traffic spikes.
      operationId: getRealtimeMetrics
      tags:
        - Metrics
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /service/{service_id}/version/{version_id}/origin:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List origins
      description: Retrieves all origins for a particular service and version. Origins define the source servers where Fastly fetches content. This endpoint returns a list of all configured origins with their complete configuration details, including host information, SSL settings, and connection timeouts.
      operationId: listOrigins
      tags:
        - Origin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Origin"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create origin
      description: Creates a new origin for the specified service and version. Origins define where Fastly should fetch your content from. This endpoint allows configuration of various origin properties including hostname, port, SSL settings, and connection timeouts. Properly configured origins are essential for content delivery performance.
      operationId: createOrigin
      tags:
        - Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OriginCreate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/origin/{origin_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/origin_name"
    get:
      summary: Get origin details
      description: Retrieves the details of a specific origin. This endpoint provides comprehensive information about an origin's configuration, including hostname, port, connection settings, and SSL options. Use this endpoint when you need to inspect or verify the configuration of a specific origin.
      operationId: getOrigin
      tags:
        - Origin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update origin
      description: Updates an existing origin configuration. This endpoint allows modification of origin properties including hostname, port, SSL settings, and connection parameters. Use this endpoint to adjust origin settings when your backend infrastructure changes or to optimize origin connection parameters.
      operationId: updateOrigin
      tags:
        - Origin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OriginUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete origin
      description: Removes an origin from the service version. This endpoint permanently deletes the specified origin configuration. Use caution when deleting origins, as it may impact the availability of content if not properly managed.
      operationId: deleteOrigin
      tags:
        - Origin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/shield:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List shields
      description: Retrieves all shield configurations for a service version. Shields are Fastly's globally distributed points of presence (POPs) that can serve as an additional layer between clients and origins. This endpoint returns information about configured shields including their locations and settings.
      operationId: listShields
      tags:
        - Shield
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Shield"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/backend/{backend_name}/shield:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - $ref: "#/components/parameters/backend_name"
    get:
      summary: Get backend shield
      description: Retrieves the shield configuration for a specific backend. Shields act as intermediary Fastly POPs that sit between the edge and the origin, offering another layer of caching. This endpoint returns the shield location and settings for the specified backend.
      operationId: getBackendShield
      tags:
        - Shield
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackendShield"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update backend shield
      description: Updates the shield configuration for a specific backend. This endpoint allows you to change the shield POP assigned to a backend, or enable/disable shielding. Shielding can reduce the load on your origin servers by serving requests from a consistent POP closer to your origin, improving performance and reliability.
      operationId: updateBackendShield
      tags:
        - Shield
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackendShieldUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackendShield"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  # Account Management Endpoints

  /billing/v3/service-usage-metrics:
    get:
      summary: Get service usage metrics
      description: Retrieve service-level usage metrics for services with non-zero usage units
      operationId: getServiceUsageMetrics
      tags:
        - Account
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUsageMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /billing/v3/usage-metrics:
    get:
      summary: Get monthly usage metrics
      description: Get monthly usage metrics
      operationId: getMonthlyUsageMetrics
      tags:
        - Account
      parameters:
        - name: month
          in: query
          schema:
            type: string
        - name: year
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /customer/{customer_id}/contacts:
    parameters:
      - name: customer_id
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Add customer contact
      description: Add a new customer contact
      operationId: createCustomerContact
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerContactCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerContact"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /customer/{customer_id}:
    parameters:
      - name: customer_id
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Update customer
      description: Update a customer
      operationId: updateCustomer
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /events:
    get:
      summary: List events
      description: List events for audit purposes
      operationId: listEvents
      tags:
        - Account
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          $ref: "#/components/responses/Unauthorized"


  # Authentication Token Endpoints
  /automation-tokens:
    get:
      summary: List all automation tokens
      description: |
        Retrieves a list of all automation tokens associated with the authenticated account. Automation tokens are service accounts designed for programmatic access and automated workflows.

        **Purpose**: Discover and audit automation tokens for security management, access review, and token lifecycle management.

        **What are automation tokens**:
        - Non-personal API tokens not tied to individual users
        - Designed for CI/CD pipelines, deployment scripts, and automated systems
        - Persist beyond individual user account changes
        - Can be scoped to specific services or operations

        **When to use**:
        - Security audits and access reviews
        - Token lifecycle management
        - Setting up monitoring for token usage
        - Before creating new tokens (check for existing ones)

        **Response includes**:
        - Token ID and name
        - Creation date and expiration
        - Scope and permissions
        - Last used timestamp
        - Associated services

        **Security considerations**:
        - Review tokens regularly for unused or expired entries
        - Monitor token usage for anomalous activity
        - Rotate tokens according to security policies
        - Delete unused tokens to minimize attack surface
      operationId: listAutomationTokens
      tags:
        - Authentication
      parameters:
        - name: include_expired
          in: query
          description: Include expired tokens in the response
          schema:
            type: boolean
            default: false
        - name: scope
          in: query
          description: Filter tokens by scope
          schema:
            type: string
            enum: [global, service_specific, read_only]
      responses:
        "200":
          description: Successfully retrieved automation tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AutomationToken"
              examples:
                active_tokens:
                  summary: List of active automation tokens
                  value:
                    - id: "at_1234567890abcdef"
                      name: "ci-cd-pipeline"
                      scope: "service_specific"
                      expires_at: "2024-12-31T23:59:59Z"
                      created_at: "2023-01-01T00:00:00Z"
                      last_used_at: "2023-10-15T10:30:00Z"
                    - id: "at_abcdef1234567890"
                      name: "monitoring-system"
                      scope: "read_only"
                      expires_at: "2025-06-30T23:59:59Z"
                      created_at: "2023-06-01T12:00:00Z"
                      last_used_at: "2023-10-20T14:15:00Z"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Insufficient permissions to list automation tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Insufficient permissions to access automation tokens"
    post:
      summary: Create new automation token
      description: |
        Creates a new automation token for programmatic access to the Fastly API. Automation tokens are designed for CI/CD systems, deployment pipelines, and other automated workflows.

        **Purpose**: Establish secure, non-personal API access for automated systems and service accounts.

        **Use cases**:
        - CI/CD pipeline authentication
        - Automated deployment scripts
        - Monitoring and alerting systems
        - Infrastructure as Code (IaC) tools
        - Third-party integrations

        **Token characteristics**:
        - Independent of individual user accounts
        - Survive user account changes or departures
        - Can be scoped to specific services or operations
        - Support expiration dates for security
        - Generate audit logs for usage tracking

        **Scoping options**:
        - **global**: Full account access (use sparingly)
        - **service_specific**: Limited to specified services
        - **read_only**: Read operations only (safe for monitoring)
        - **limited**: Custom permission sets

        **Security best practices**:
        - Use least-privilege principle for scoping
        - Set reasonable expiration dates
        - Use descriptive names for token identification
        - Store tokens securely (environment variables, secret managers)
        - Rotate tokens regularly
        - Monitor token usage for anomalies

        **Important**: The token value is only shown once upon creation. Store it securely immediately.
      operationId: createAutomationToken
      tags:
        - Authentication
      requestBody:
        description: Automation token configuration
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationTokenCreate"
            examples:
              ci_cd_token:
                summary: CI/CD pipeline token
                value:
                  name: "github-actions-deployment"
                  scope: "service_specific"
                  expires_at: "2024-12-31T23:59:59Z"
                  services: ["SU1Z0isxPaozGVKXdv0eY"]
              monitoring_token:
                summary: Read-only monitoring token
                value:
                  name: "datadog-metrics-collector"
                  scope: "read_only"
                  expires_at: "2025-06-30T23:59:59Z"
              emergency_token:
                summary: Emergency access token
                value:
                  name: "emergency-deployment-token"
                  scope: "global"
                  expires_at: "2024-01-31T23:59:59Z"
        required: true
      responses:
        "201":
          description: Automation token created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationToken"
              examples:
                new_token_response:
                  summary: Newly created token with secret
                  value:
                    id: "at_1234567890abcdef"
                    name: "github-actions-deployment"
                    token: "fa-abc123def456ghi789jkl012mno345pqr678stu901vwx234yz"
                    scope: "service_specific"
                    expires_at: "2024-12-31T23:59:59Z"
                    created_at: "2023-10-20T15:30:00Z"
                    services: ["SU1Z0isxPaozGVKXdv0eY"]
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Insufficient permissions to create automation tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Insufficient permissions to create automation tokens"
        "422":
          description: Token validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Token name must be unique"
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string


  /tokens:
    get:
      summary: List user tokens
      description: List user tokens
      operationId: listUserTokens
      tags:
        - Authentication
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserToken"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create user token
      description: Create a user token
      operationId: createUserToken
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTokenCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToken"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /current_user:
    get:
      summary: Get current user
      description: Get the current user
      operationId: getCurrentUser
      tags:
        - Authentication
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"


  # Security Endpoints
  /ddos-protection/v1/events:
    get:
      summary: List DDoS protection events
      description: List all DDoS protection events
      operationId: listDdosEvents
      tags:
        - Security
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DdosEvent"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /tls/certificates:
    get:
      summary: List TLS certificates
      description: List all TLS certificates
      operationId: listTlsCertificates
      tags:
        - Security
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TlsCertificate"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create TLS certificate
      description: Create a new TLS certificate
      operationId: createTlsCertificate
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TlsCertificateCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TlsCertificate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /tls/activations:
    get:
      summary: List TLS activations
      description: List TLS activations
      operationId: listTlsActivations
      tags:
        - Security
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TlsActivation"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create TLS activation
      description: Create a TLS activation
      operationId: createTlsActivation
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TlsActivationCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TlsActivation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  /tls/mutual_authentications:
    get:
      summary: List mutual TLS configurations
      description: List all mutual TLS configurations
      operationId: listMutualAuthentications
      tags:
        - Security
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MutualAuthentication"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create mutual TLS configuration
      description: Create a mutual TLS configuration
      operationId: createMutualAuthentication
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutualAuthenticationCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutualAuthentication"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  # VCL Object Endpoints
  /service/{service_id}/version/{version_id}/condition:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List conditions
      description: List all conditions for a service version
      operationId: listConditions
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Condition"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create condition
      description: Create a new condition
      operationId: createCondition
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConditionCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /service/{service_id}/version/{version_id}/condition/{condition_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - name: condition_name
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get condition
      description: Get details of a specific condition
      operationId: getCondition
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update condition
      description: Update a condition
      operationId: updateCondition
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConditionUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete condition
      description: Delete a condition
      operationId: deleteCondition
      tags:
        - VCL
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/header:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List headers
      description: List all headers for a service version
      operationId: listHeaders
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Header"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create header
      description: Create a new header
      operationId: createHeader
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeaderCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Header"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /service/{service_id}/version/{version_id}/header/{header_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - name: header_name
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get header
      description: Get details of a specific header
      operationId: getHeader
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Header"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update header
      description: Update a header object
      operationId: updateHeader
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeaderUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Header"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete header
      description: Delete a header object
      operationId: deleteHeader
      tags:
        - VCL
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/gzip:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List gzip configurations
      description: List all gzip configurations for a service version
      operationId: listGzipConfigurations
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GzipConfiguration"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create gzip configuration
      description: Create a new gzip configuration
      operationId: createGzipConfiguration
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GzipConfigurationCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GzipConfiguration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /service/{service_id}/version/{version_id}/gzip/{gzip_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - name: gzip_name
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get gzip configuration
      description: Get details of a specific gzip configuration
      operationId: getGzipConfiguration
      tags:
        - VCL
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GzipConfiguration"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update gzip configuration
      description: Update a gzip configuration
      operationId: updateGzipConfiguration
      tags:
        - VCL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GzipConfigurationUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GzipConfiguration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete gzip configuration
      description: Delete a gzip configuration
      operationId: deleteGzipConfiguration
      tags:
        - VCL
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  # Load Balancing Endpoints
  /service/{service_id}/version/{version_id}/director:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List directors
      description: List all directors for a service version
      operationId: listDirectors
      tags:
        - LoadBalancing
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Director"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create director
      description: Create a new director
      operationId: createDirector
      tags:
        - LoadBalancing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectorCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Director"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /service/{service_id}/version/{version_id}/director/{director_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - name: director_name
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get director
      description: Get details of a specific director
      operationId: getDirector
      tags:
        - LoadBalancing
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Director"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update director
      description: Update a director
      operationId: updateDirector
      tags:
        - LoadBalancing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectorUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Director"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete director
      description: Delete a director
      operationId: deleteDirector
      tags:
        - LoadBalancing
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/version/{version_id}/pool:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
    get:
      summary: List pools
      description: List all pools for a service version
      operationId: listPools
      tags:
        - LoadBalancing
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pool"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create pool
      description: Create a new server pool
      operationId: createPool
      tags:
        - LoadBalancing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PoolCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /service/{service_id}/version/{version_id}/pool/{pool_name}:
    parameters:
      - $ref: "#/components/parameters/service_id"
      - $ref: "#/components/parameters/version_id"
      - name: pool_name
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get pool
      description: Get details of a specific pool
      operationId: getPool
      tags:
        - LoadBalancing
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update pool
      description: Update a server pool
      operationId: updatePool
      tags:
        - LoadBalancing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PoolUpdate"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete pool
      description: Delete a server pool
      operationId: deletePool
      tags:
        - LoadBalancing
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  # Utility Endpoints
  /datacenters:
    get:
      summary: List Fastly POPs
      description: List all Fastly Points of Presence (POPs) and their locations
      operationId: listDatacenters
      tags:
        - Utilities
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Datacenter"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /public-ip-list:
    get:
      summary: List Fastly public IPs
      description: List all Fastly public IP addresses
      operationId: listPublicIPs
      tags:
        - Utilities
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicIPList"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /content/edge_check:
    get:
      summary: Check content status
      description: Check status of content in each POP's cache
      operationId: checkContentStatus
      tags:
        - Utilities
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
            description: URL to check
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentStatus"
        "401":
          $ref: "#/components/responses/Unauthorized"

components:
  schemas:
    Service:
      type: object
      description: |
        Represents a Fastly service configuration. A service is the top-level organizational unit that contains all CDN configurations for a specific application or website.
      properties:
        id:
          type: string
          description: |
            Unique alphanumeric identifier for the service. This immutable ID is used in all API operations referencing this service.
            Format: Alphanumeric string, typically 20-25 characters
            Usage: Required for all service-specific API endpoints
          pattern: '^[A-Za-z0-9]{20,25}$'
          example: "SU1Z0isxPaozGVKXdv0eY"
        name:
          type: string
          description: |
            Human-readable name for the service. This name appears in the Fastly control panel, logs, and monitoring systems.
            Constraints: Must be unique within the customer account
            Best practices: Use descriptive names that identify the application or purpose
          minLength: 1
          maxLength: 100
          example: "my-website-cdn"
        customer_id:
          type: string
          description: |
            Unique identifier for the customer account that owns this service.
            This establishes the billing and access control context for the service.
          pattern: '^[A-Za-z0-9]+$'
          example: "x4xCwxxJxGCx123Rx5xTx"
        comment:
          type: string
          description: |
            Optional descriptive note or documentation for the service.
            Use this field to document the service purpose, configuration notes, or team ownership information.
          maxLength: 500
          example: "Production CDN for main website - handles static assets and API acceleration"
        type:
          type: string
          description: |
            Service type indicating the Fastly platform and features available.
            - vcl: Traditional VCL-based service with full customization
            - wasm: Fastly Compute service using WebAssembly
          enum: ["vcl", "wasm"]
          example: "vcl"
        created_at:
          type: string
          format: date-time
          description: |
            ISO 8601 timestamp when the service was initially created.
            This timestamp is immutable and tracks the service lifecycle.
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: |
            ISO 8601 timestamp when the service metadata was last modified.
            This updates when service name, comment, or other metadata changes (not version-specific changes).
          example: "2023-10-20T14:45:00Z"
        active_version:
          type: object
          description: |
            Information about the currently active (live) version of this service.
            The active version serves production traffic and cannot be modified.
          properties:
            number:
              type: integer
              description: |
                Version number of the currently active service configuration.
                This version is serving live traffic and is locked from modification.
              minimum: 1
              example: 3
            locked:
              type: boolean
              description: Whether the active version is locked and cannot be modified
              example: true
            deployed:
              type: boolean
              description: Whether this version is currently deployed to the edge
              example: true
        versions:
          type: integer
          description: |
            Total number of versions created for this service (active and inactive).
            Each version represents a snapshot of the service configuration.
          minimum: 1
          example: 5
        paused:
          type: boolean
          description: |
            Whether the service is currently paused.
            Paused services do not serve traffic but preserve all configurations.
          example: false
      required:
        - id
        - name
        - customer_id
        - type
        - created_at
        - updated_at

    ServiceCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the service.
          example: My Service
        comment:
          type: string
          description: A freeform descriptive note.
          example: New service
        type:
          type: string
          description: The type of this service.
          enum: [vcl, wasm]
          example: vcl
      required:
        - name
        - type

    ServiceUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the service.
          example: Updated Service Name
        comment:
          type: string
          description: A freeform descriptive note.
          example: Updated service

    Domain:
      type: object
      properties:
        id:
          type: string
          description: Alphanumeric string identifying the domain.
          example: 1Z1MqLPfXE1plDLBzF1xin
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: The name of the domain or domains associated with this service.
          example: www.example.com
        comment:
          type: string
          description: A freeform descriptive note.
          example: Domain for website
      required:
        - id
        - service_id
        - version
        - name

    DomainCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the domain or domains associated with this service.
          example: www.example.com
        comment:
          type: string
          description: A freeform descriptive note.
          example: Domain for website
      required:
        - name

    DomainUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the domain or domains associated with this service.
          example: updated.example.com
        comment:
          type: string
          description: A freeform descriptive note.
          example: Updated domain for website

    Version:
      type: object
      properties:
        number:
          type: integer
          description: Integer identifying a service version.
          example: 1
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        active:
          type: boolean
          description: Whether this is the active version or not.
          example: true
        locked:
          type: boolean
          description: Whether this version is locked or not.
          example: false
        deployed:
          type: boolean
          description: Whether this version has been deployed or not.
          example: true
        staging:
          type: boolean
          description: Whether this version is for staging or not.
          example: false
        testing:
          type: boolean
          description: Whether this version is for testing or not.
          example: false
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the version was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the version was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - number
        - service_id
        - active

    Backend:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: The name of the backend.
          example: My Backend
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the backend.
          example: backend.example.com
        port:
          type: integer
          description: Port number of the address.
          example: 80
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: cache.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 5000
        max_conn:
          type: integer
          description: Maximum number of connections.
          example: 200
        ssl_cert_hostname:
          type: string
          description: Overrides ssl_hostname, but only for cert verification.
          example: cert.example.com
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: true
        ssl_sni_hostname:
          type: string
          description: Overrides ssl_hostname, but only for SNI in the handshake.
          example: sni.example.com
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the backend.
          example: false
        weight:
          type: integer
          description: Weight used to load balance this backend against others.
          example: 100
        between_bytes_timeout:
          type: integer
          description: How long to wait between bytes in milliseconds.
          example: 10000
        auto_loadbalance:
          type: boolean
          description: Whether or not this backend should be automatically load balanced.
          example: false
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: iad-va-us
      required:
        - service_id
        - version
        - name
        - address
        - port

    BackendCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the backend.
          example: My Backend
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the backend.
          example: backend.example.com
        port:
          type: integer
          description: Port number of the address.
          example: 80
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: cache.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 5000
        max_conn:
          type: integer
          description: Maximum number of connections.
          example: 200
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: true
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the backend.
          example: false
        weight:
          type: integer
          description: Weight used to load balance this backend against others.
          example: 100
        auto_loadbalance:
          type: boolean
          description: Whether or not this backend should be automatically load balanced.
          example: false
      required:
        - name
        - address
        - port

    BackendUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the backend.
          example: Updated Backend
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the backend.
          example: updated-backend.example.com
        port:
          type: integer
          description: Port number of the address.
          example: 443
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: updated-cache.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 10000
        max_conn:
          type: integer
          description: Maximum number of connections.
          example: 300
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: false
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the backend.
          example: true
        weight:
          type: integer
          description: Weight used to load balance this backend against others.
          example: 200
        auto_loadbalance:
          type: boolean
          description: Whether or not this backend should be automatically load balanced.
          example: true

    VCL:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: The name of this VCL.
          example: Main VCL
        content:
          type: string
          description: The VCL code.
          example: "vcl 4.0;\n\nbackend default {\n  .host = \"127.0.0.1\";\n  .port = \"9092\";\n}"
        main:
          type: boolean
          description: Set to true when this is the main VCL, otherwise false.
          example: true
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the VCL was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the VCL was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - name
        - content

    VCLCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of this VCL.
          example: Main VCL
        content:
          type: string
          description: The VCL code.
          example: "vcl 4.0;\n\nbackend default {\n  .host = \"127.0.0.1\";\n  .port = \"9092\";\n}"
        main:
          type: boolean
          description: Set to true when this is the main VCL, otherwise false.
          example: true
      required:
        - name
        - content

    CacheSetting:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: Name for the cache settings object.
          example: my-cache-setting
        ttl:
          type: integer
          description: Maximum time to live for the cache in seconds.
          example: 3600
        stale_ttl:
          type: integer
          description: Maximum time to serve stale object in seconds.
          example: 300
        action:
          type: string
          description: One of pass, cache, or restart, indicating how to handle the cache.
          enum: [pass, cache, restart]
          example: cache
        cache_condition:
          type: string
          description: Name of the cache condition controlling when this configuration applies.
          example: testing
      required:
        - service_id
        - version
        - name
        - action

    CacheSettingCreate:
      type: object
      properties:
        name:
          type: string
          description: Name for the cache settings object.
          example: my-cache-setting
        ttl:
          type: integer
          description: Maximum time to live for the cache in seconds.
          example: 3600
        stale_ttl:
          type: integer
          description: Maximum time to serve stale object in seconds.
          example: 300
        action:
          type: string
          description: One of pass, cache, or restart, indicating how to handle the cache.
          enum: [pass, cache, restart]
          example: cache
        cache_condition:
          type: string
          description: Name of the cache condition controlling when this configuration applies.
          example: testing
      required:
        - name
        - action

    CacheSettingUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name for the cache settings object.
          example: updated-cache-setting
        ttl:
          type: integer
          description: Maximum time to live for the cache in seconds.
          example: 7200
        stale_ttl:
          type: integer
          description: Maximum time to serve stale object in seconds.
          example: 600
        action:
          type: string
          description: One of pass, cache, or restart, indicating how to handle the cache.
          enum: [pass, cache, restart]
          example: pass
        cache_condition:
          type: string
          description: Name of the cache condition controlling when this configuration applies.
          example: production

    Dictionary:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        id:
          type: string
          description: Alphanumeric string identifying a Dictionary.
          example: 5BUHk1vCIFZXlWdH41W3QK
        name:
          type: string
          description: Name for the Dictionary.
          example: my_dictionary
        write_only:
          type: boolean
          description: Determines if items in the dictionary are readable or not.
          example: false
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the dictionary was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the dictionary was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - id
        - name

    DictionaryCreate:
      type: object
      properties:
        name:
          type: string
          description: Name for the Dictionary.
          example: my_dictionary
        write_only:
          type: boolean
          description: Determines if items in the dictionary are readable or not.
          example: false
      required:
        - name

    DictionaryItem:
      type: object
      properties:
        dictionary_id:
          type: string
          description: Alphanumeric string identifying a Dictionary.
          example: 5BUHk1vCIFZXlWdH41W3QK
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        item_key:
          type: string
          description: Dictionary item key.
          example: some-key
        item_value:
          type: string
          description: Dictionary item value.
          example: some-value
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the dictionary item was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the dictionary item was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - dictionary_id
        - service_id
        - item_key
        - item_value

    DictionaryItemCreate:
      type: object
      properties:
        item_key:
          type: string
          description: Dictionary item key.
          example: some-key
        item_value:
          type: string
          description: Dictionary item value.
          example: some-value
      required:
        - item_key
        - item_value

    ACL:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        id:
          type: string
          description: Alphanumeric string identifying an ACL.
          example: 6tUXdegLTf5BCig0zGFrU3
        name:
          type: string
          description: Name for the ACL.
          example: my_acl
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the ACL was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the ACL was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - id
        - name

    ACLCreate:
      type: object
      properties:
        name:
          type: string
          description: Name for the ACL.
          example: my_acl
      required:
        - name

    ACLEntry:
      type: object
      properties:
        acl_id:
          type: string
          description: Alphanumeric string identifying an ACL.
          example: 6tUXdegLTf5BCig0zGFrU3
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        id:
          type: string
          description: Alphanumeric string identifying an ACL Entry.
          example: 6yxNzlOpW1V7JfSwvLGtOc
        ip:
          type: string
          description: An IP address.
          example: 192.168.0.1
        subnet:
          type: integer
          description: Number of bits for the subnet mask applied to the IP address.
          example: 24
        negated:
          type: boolean
          description: Whether to negate the match.
          example: false
        comment:
          type: string
          description: A freeform descriptive note.
          example: ACL entry for office
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the entry was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the entry was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - acl_id
        - service_id
        - id
        - ip

    ACLEntryCreate:
      type: object
      properties:
        ip:
          type: string
          description: An IP address.
          example: 192.168.0.1
        subnet:
          type: integer
          description: Number of bits for the subnet mask applied to the IP address.
          example: 24
        negated:
          type: boolean
          description: Whether to negate the match.
          example: false
        comment:
          type: string
          description: A freeform descriptive note.
          example: ACL entry for office
      required:
        - ip

    Healthcheck:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: The name of the healthcheck.
          example: test-healthcheck
        method:
          type: string
          description: Which HTTP method to use.
          example: HEAD
        host:
          type: string
          description: The host header to send.
          example: example.com
        path:
          type: string
          description: The path to check.
          example: /health
        http_version:
          type: string
          description: Whether to use version 1.0 or 1.1 HTTP.
          example: "1.1"
        timeout:
          type: integer
          description: Timeout in milliseconds.
          example: 5000
        check_interval:
          type: integer
          description: How often to run the healthcheck in milliseconds.
          example: 10000
        expected_response:
          type: integer
          description: The status code expected from the host.
          example: 200
        window:
          type: integer
          description: The number of most recent healthcheck queries to keep for this healthcheck.
          example: 5
        threshold:
          type: integer
          description: How many healthchecks must succeed to be considered healthy.
          example: 3
        initial:
          type: integer
          description: When loading a config, the initial number of probes to be seen as OK.
          example: 2
      required:
        - service_id
        - version
        - name
        - host
        - path

    HealthcheckCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the healthcheck.
          example: test-healthcheck
        method:
          type: string
          description: Which HTTP method to use.
          example: HEAD
        host:
          type: string
          description: The host header to send.
          example: example.com
        path:
          type: string
          description: The path to check.
          example: /health
        http_version:
          type: string
          description: Whether to use version 1.0 or 1.1 HTTP.
          example: "1.1"
        timeout:
          type: integer
          description: Timeout in milliseconds.
          example: 5000
        check_interval:
          type: integer
          description: How often to run the healthcheck in milliseconds.
          example: 10000
        expected_response:
          type: integer
          description: The status code expected from the host.
          example: 200
        window:
          type: integer
          description: The number of most recent healthcheck queries to keep for this healthcheck.
          example: 5
        threshold:
          type: integer
          description: How many healthchecks must succeed to be considered healthy.
          example: 3
        initial:
          type: integer
          description: When loading a config, the initial number of probes to be seen as OK.
          example: 2
      required:
        - name
        - host
        - path

    LoggingS3:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: The name for the real-time logging configuration.
          example: my-s3-logging
        bucket_name:
          type: string
          description: The name of the S3 bucket.
          example: my-bucket
        access_key:
          type: string
          description: Your S3 account access key.
          example: S3ACCESSKEY
        secret_key:
          type: string
          description: Your S3 account secret key.
          example: S3SECRETKEY
        domain:
          type: string
          description: The domain of the S3 endpoint.
          example: s3.amazonaws.com
        path:
          type: string
          description: The path to upload logs to.
          example: /my_log_path
        period:
          type: integer
          description: How frequently log files are finalized so they can be available for reading (in seconds).
          example: 3600
        gzip_level:
          type: integer
          description: What level of GZIP encoding to have when dumping logs (0-9).
          example: 9
        format:
          type: string
          description: Apache style log formatting.
          example: "%h %l %u %t %r %>s"
        format_version:
          type: integer
          description: The version of the custom logging format used for the configured endpoint.
          enum: [1, 2]
          example: 2
        response_condition:
          type: string
          description: The name of an existing condition in the configured endpoint.
          example: Response Condition
        timestamp_format:
          type: string
          description: A timestamp format.
          example: "%Y-%m-%dT%H:%M:%S.000"
        redundancy:
          type: string
          description: The S3 redundancy level.
          enum: [standard, reduced_redundancy]
          example: standard
        placement:
          type: string
          description: Where in the generated VCL the logging call should be placed.
          enum: [none, waf_debug]
          example: none
      required:
        - service_id
        - version
        - name
        - bucket_name
        - access_key
        - secret_key

    LoggingS3Create:
      type: object
      properties:
        name:
          type: string
          description: The name for the real-time logging configuration.
          example: my-s3-logging
        bucket_name:
          type: string
          description: The name of the S3 bucket.
          example: my-bucket
        access_key:
          type: string
          description: Your S3 account access key.
          example: S3ACCESSKEY
        secret_key:
          type: string
          description: Your S3 account secret key.
          example: S3SECRETKEY
        domain:
          type: string
          description: The domain of the S3 endpoint.
          example: s3.amazonaws.com
        path:
          type: string
          description: The path to upload logs to.
          example: /my_log_path
        period:
          type: integer
          description: How frequently log files are finalized so they can be available for reading (in seconds).
          example: 3600
        gzip_level:
          type: integer
          description: What level of GZIP encoding to have when dumping logs (0-9).
          example: 9
        format:
          type: string
          description: Apache style log formatting.
          example: "%h %l %u %t %r %>s"
        format_version:
          type: integer
          description: The version of the custom logging format used for the configured endpoint.
          enum: [1, 2]
          example: 2
        response_condition:
          type: string
          description: The name of an existing condition in the configured endpoint.
          example: Response Condition
        timestamp_format:
          type: string
          description: A timestamp format.
          example: "%Y-%m-%dT%H:%M:%S.000"
        redundancy:
          type: string
          description: The S3 redundancy level.
          enum: [standard, reduced_redundancy]
          example: standard
        placement:
          type: string
          description: Where in the generated VCL the logging call should be placed.
          enum: [none, waf_debug]
          example: none
      required:
        - name
        - bucket_name
        - access_key
        - secret_key

    WAF:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        id:
          type: string
          description: Alphanumeric string identifying a WAF Firewall.
          example: qKJJUh9QpYIdBgFKkRTC3n
        prefetch_condition:
          type: string
          description: Name of the corresponding condition object.
          example: WAF_Condition
        response:
          type: string
          description: Name of the corresponding response object.
          example: WAF_Response
        rule_statuses_log_count:
          type: object
          properties:
            block:
              type: integer
              description: Number of rules with block status.
              example: 365
            log:
              type: integer
              description: Number of rules with log status.
              example: 248
            score:
              type: integer
              description: Number of rules with score status.
              example: 142
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the WAF Firewall was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the WAF Firewall was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - id

    WAFCreate:
      type: object
      properties:
        prefetch_condition:
          type: string
          description: Name of the corresponding condition object.
          example: WAF_Condition
        response:
          type: string
          description: Name of the corresponding response object.
          example: WAF_Response
      required:
        - prefetch_condition

    WAFRule:
      type: object
      properties:
        id:
          type: string
          description: Alphanumeric string identifying a WAF rule.
          example: L68QKwN8QcmRFjV4y1BuN
        rule_id:
          type: string
          description: Corresponding ModSecurity rule ID.
          example: "942100"
        severity:
          type: integer
          description: Severity score.
          example: 3
        status:
          type: string
          description: Rule status.
          enum: [log, block, score]
          example: log
        tags:
          type: array
          description: List of rule tags.
          items:
            type: string
          example:
            [
              "application-multi",
              "language-multi",
              "platform-multi",
              "attack-sqli",
            ]
        message:
          type: string
          description: Rule message.
          example: "SQL Injection Attack Detected via libinjection"
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the rule was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the rule was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - id
        - rule_id
        - status

    WAFRuleUpdate:
      type: object
      properties:
        status:
          type: string
          description: Rule status.
          enum: [log, block, score]
          example: block
      required:
        - status

    RateLimit:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        id:
          type: string
          description: Alphanumeric string identifying a Rate Limit.
          example: 3M74CpUYEpZIQhK4DfUQtr
        name:
          type: string
          description: A human readable name for the rate limiting rule.
          example: My Rate Limit
        uri:
          type: string
          description: The URI pattern to match.
          example: /api/*
        http_methods:
          type: array
          description: Array of HTTP methods to match.
          items:
            type: string
            enum: [GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS]
          example: ["GET", "POST"]
        rps_limit:
          type: integer
          description: Upper limit of requests per second allowed.
          example: 10
        window_size:
          type: integer
          description: Number of seconds during which the RPS limit is calculated.
          example: 60
        client_key:
          type: array
          description: Array of VCL variables used to generate a counter key to identify a client.
          items:
            type: string
          example: ["req.http.Fastly-Client-IP", "req.http.User-Agent"]
        penalty_box_duration:
          type: integer
          description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
          example: 60
        action:
          type: string
          description: The action to take when a rate limit is exceeded.
          enum: [response, response_object, custom_response]
          example: response
        response:
          type: object
          description: Custom response to be sent when the rate limit is exceeded.
          properties:
            status:
              type: integer
              description: HTTP status code for the response.
              example: 429
            content_type:
              type: string
              description: MIME type for the response.
              example: application/json
            content:
              type: string
              description: Response body content.
              example: '{"error": "rate limit exceeded"}'
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the rate limit was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the rate limit was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - id
        - name
        - uri
        - rps_limit
        - action

    RateLimitCreate:
      type: object
      properties:
        name:
          type: string
          description: A human readable name for the rate limiting rule.
          example: My Rate Limit
        uri:
          type: string
          description: The URI pattern to match.
          example: /api/*
        http_methods:
          type: array
          description: Array of HTTP methods to match.
          items:
            type: string
            enum: [GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS]
          example: ["GET", "POST"]
        rps_limit:
          type: integer
          description: Upper limit of requests per second allowed.
          example: 10
        window_size:
          type: integer
          description: Number of seconds during which the RPS limit is calculated.
          example: 60
        client_key:
          type: array
          description: Array of VCL variables used to generate a counter key to identify a client.
          items:
            type: string
          example: ["req.http.Fastly-Client-IP", "req.http.User-Agent"]
        penalty_box_duration:
          type: integer
          description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
          example: 60
        action:
          type: string
          description: The action to take when a rate limit is exceeded.
          enum: [response, response_object, custom_response]
          example: response
        response:
          type: object
          description: Custom response to be sent when the rate limit is exceeded.
          properties:
            status:
              type: integer
              description: HTTP status code for the response.
              example: 429
            content_type:
              type: string
              description: MIME type for the response.
              example: application/json
            content:
              type: string
              description: Response body content.
              example: '{"error": "rate limit exceeded"}'
      required:
        - name
        - uri
        - rps_limit
        - action

    RateLimitUpdate:
      type: object
      properties:
        name:
          type: string
          description: A human readable name for the rate limiting rule.
          example: Updated Rate Limit
        uri:
          type: string
          description: The URI pattern to match.
          example: /api/v2/*
        http_methods:
          type: array
          description: Array of HTTP methods to match.
          items:
            type: string
            enum: [GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS]
          example: ["GET", "POST", "PUT"]
        rps_limit:
          type: integer
          description: Upper limit of requests per second allowed.
          example: 20
        window_size:
          type: integer
          description: Number of seconds during which the RPS limit is calculated.
          example: 120
        client_key:
          type: array
          description: Array of VCL variables used to generate a counter key to identify a client.
          items:
            type: string
          example:
            [
              "req.http.Fastly-Client-IP",
              "req.http.User-Agent",
              "req.http.Authorization",
            ]
        penalty_box_duration:
          type: integer
          description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
          example: 120
        action:
          type: string
          description: The action to take when a rate limit is exceeded.
          enum: [response, response_object, custom_response]
          example: custom_response
        response:
          type: object
          description: Custom response to be sent when the rate limit is exceeded.
          properties:
            status:
              type: integer
              description: HTTP status code for the response.
              example: 429
            content_type:
              type: string
              description: MIME type for the response.
              example: application/json
            content:
              type: string
              description: Response body content.
              example: '{"error": "too many requests", "retry_after": 60}'

    ComputePackage:
      type: object
      properties:
        id:
          type: string
          description: Alphanumeric string identifying the Compute package.
          example: b2Z8b3UjhuJYtUTztFYEpi
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying the package version number.
          example: 1
        name:
          type: string
          description: Name of the Compute package.
          example: my-compute-package
        metadata:
          type: object
          description: Metadata associated with the package.
          additionalProperties: true
          example:
            language: rust
            rustVersion: "1.53"
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the package was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the package was last updated.
          example: 2016-08-17T19:27:28+00:00
        size:
          type: integer
          description: Size of the package in bytes.
          example: 3145728
        hashsum:
          type: string
          description: SHA512 hash of the package content.
          example: "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
      required:
        - id
        - service_id
        - version
        - name
        - size
        - hashsum

    ComputeConfig:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        package_id:
          type: string
          description: Alphanumeric string identifying the Compute package.
          example: b2Z8b3UjhuJYtUTztFYEpi
        backend_configs:
          type: object
          description: Configuration for backend used by the Compute service.
          additionalProperties:
            type: object
            properties:
              override_host:
                type: string
                description: Override host value.
                example: api.example.com
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the configuration was created.
          example: 2016-08-17T19:27:28+00:00
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the configuration was last updated.
          example: 2016-08-17T19:27:28+00:00
      required:
        - service_id
        - version
        - package_id

    ComputeConfigUpdate:
      type: object
      properties:
        package_id:
          type: string
          description: Alphanumeric string identifying the Compute package.
          example: b2Z8b3UjhuJYtUTztFYEpi
        backend_configs:
          type: object
          description: Configuration for backend used by the Compute service.
          additionalProperties:
            type: object
            properties:
              override_host:
                type: string
                description: Override host value.
                example: api.example.com
      required:
        - package_id

    Stats:
      type: object
      properties:
        status:
          type: string
          description: Status of the request.
          example: success
        meta:
          type: object
          description: Metadata about the request.
          properties:
            from:
              type: string
              format: date-time
              description: Start time for the stat window.
              example: "2020-04-01T00:00:00Z"
            to:
              type: string
              format: date-time
              description: End time for the stat window.
              example: "2020-04-02T00:00:00Z"
            by:
              type: string
              description: Granularity of the stats.
              example: day
            region:
              type: string
              description: Geographic region for which stats were requested.
              example: all
        data:
          type: array
          description: The actual stats data.
          items:
            type: object
            properties:
              requests:
                type: integer
                description: Number of requests processed.
                example: 1234567
              hits:
                type: integer
                description: Number of cache hits.
                example: 987654
              hits_time:
                type: number
                format: float
                description: Total time spent processing cache hits in milliseconds.
                example: 324543.21
              miss:
                type: integer
                description: Number of cache misses.
                example: 246913
              miss_time:
                type: number
                format: float
                description: Total time spent processing cache misses in milliseconds.
                example: 892365.42
              bandwidth:
                type: integer
                description: Total bandwidth used in bytes.
                example: 9876543210
              errors:
                type: integer
                description: Number of errors.
                example: 1234
              pipe:
                type: integer
                description: Number of pipe requests.
                example: 321
              uncacheable:
                type: integer
                description: Number of uncacheable requests.
                example: 4567
              timestamp:
                type: string
                format: date-time
                description: Timestamp for this data point.
                example: "2020-04-01T12:00:00Z"

    StatsSummary:
      type: object
      properties:
        status:
          type: string
          description: Status of the request.
          example: success
        meta:
          type: object
          description: Metadata about the request.
          properties:
            from:
              type: string
              format: date-time
              description: Start time for the stat window.
              example: "2020-04-01T00:00:00Z"
            to:
              type: string
              format: date-time
              description: End time for the stat window.
              example: "2020-04-30T00:00:00Z"
        data:
          type: object
          description: The summarized stats data.
          properties:
            requests:
              type: integer
              description: Total number of requests processed.
              example: 15000000
            hits:
              type: integer
              description: Total number of cache hits.
              example: 12750000
            hit_ratio:
              type: number
              format: float
              description: Ratio of cache hits to total requests.
              example: 0.85
            bandwidth:
              type: integer
              description: Total bandwidth used in bytes.
              example: 243000000000
            errors:
              type: integer
              description: Total number of errors.
              example: 15000
            status_codes:
              type: object
              description: Breakdown of requests by HTTP status code.
              additionalProperties:
                type: integer
              example:
                "200": 14250000
                "301": 300000
                "404": 435000
                "500": 15000

    RealtimeMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the data point.
          example: "2020-04-02T15:01:23Z"
        data:
          type: array
          description: Array of realtime data points.
          items:
            type: object
            properties:
              recorded:
                type: string
                format: date-time
                description: Time when this data point was recorded.
                example: "2020-04-02T15:01:23Z"
              requests:
                type: integer
                description: Number of requests in this time window.
                example: 1234
              resp_header_bytes:
                type: integer
                description: Response header bytes served.
                example: 123456
              resp_body_bytes:
                type: integer
                description: Response body bytes served.
                example: 9876543
              log_bytes:
                type: integer
                description: Log bytes generated.
                example: 54321
              bereq_header_bytes:
                type: integer
                description: Backend request header bytes.
                example: 12345
              bereq_body_bytes:
                type: integer
                description: Backend request body bytes.
                example: 98765
              status_1xx:
                type: integer
                description: Number of 1xx status responses.
                example: 0
              status_2xx:
                type: integer
                description: Number of 2xx status responses.
                example: 1000
              status_3xx:
                type: integer
                description: Number of 3xx status responses.
                example: 200
              status_4xx:
                type: integer
                description: Number of 4xx status responses.
                example: 30
              status_5xx:
                type: integer
                description: Number of 5xx status responses.
                example: 4
              hits:
                type: integer
                description: Number of cache hits.
                example: 1000
              miss:
                type: integer
                description: Number of cache misses.
                example: 234
              uncacheable:
                type: integer
                description: Number of uncacheable requests.
                example: 30
              errors:
                type: integer
                description: Number of errors.
                example: 4

    HistoricalStats:
      type: object
      properties:
        status:
          type: string
          description: Status of the request.
          example: success
        meta:
          type: object
          description: Metadata about the request.
          properties:
            from:
              type: string
              format: date-time
              description: Start time for the stat window.
              example: "2020-01-01T00:00:00Z"
            to:
              type: string
              format: date-time
              description: End time for the stat window.
              example: "2020-04-01T00:00:00Z"
            by:
              type: string
              description: Granularity of the data points.
              example: month
            region:
              type: string
              description: Geographic region for the stats.
              example: all
            metric:
              type: string
              description: The metric being reported.
              example: requests
        data:
          type: array
          description: The historical data points.
          items:
            type: object
            properties:
              service_id:
                type: string
                description: Alphanumeric string identifying the service.
                example: SU1Z0isxPaozGVKXdv0eY
              name:
                type: string
                description: Name of the service.
                example: My Service
              value:
                type: number
                description: Value of the requested metric for this time period.
                example: 15000000
              timestamp:
                type: string
                format: date-time
                description: Timestamp for this data point.
                example: "2020-01-01T00:00:00Z"

    PurgeResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the purge request.
          example: ok
        id:
          type: string
          description: Alphanumeric string identifying the purge request.
          example: 3ZUs9oXQ3ztxEwJRQUcMRG
        surrogate_keys:
          type: array
          description: The surrogate keys that were purged.
          items:
            type: string
          example: ["key1", "key2"]
      required:
        - status
        - id

    PurgeStatus:
      type: object
      properties:
        status:
          type: string
          description: Current status of the purge request.
          enum: [in_progress, complete, failed]
          example: complete
        id:
          type: string
          description: Alphanumeric string identifying the purge request.
          example: 3ZUs9oXQ3ztxEwJRQUcMRG
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the purge request was created.
          example: "2020-04-01T12:30:00Z"
        started_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the purge request started processing.
          example: "2020-04-01T12:30:01Z"
        completed_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the purge request completed.
          example: "2020-04-01T12:30:15Z"
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        object_type:
          type: string
          description: Type of object that was purged.
          enum: [url, surrogate-key, all]
          example: surrogate-key
        object:
          type: string
          description: Object that was purged (URL, key, etc).
          example: "key1"
      required:
        - status
        - id
        - created_at
        - service_id

    Origin:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        name:
          type: string
          description: Name for the origin server.
          example: My Origin Server
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the origin server.
          example: origin.example.com
        port:
          type: integer
          description: Port number of the origin server.
          example: 443
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the origin.
          example: true
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: override-origin.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 5000
        first_byte_timeout:
          type: integer
          description: How long to wait for the first byte in milliseconds.
          example: 15000
        between_bytes_timeout:
          type: integer
          description: How long to wait between bytes in milliseconds.
          example: 10000
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: iad-va-us
        shield_region:
          type: string
          description: Geographic region of the shield.
          example: us-east
        ssl_cert_hostname:
          type: string
          description: Overrides ssl_hostname, but only for cert verification.
          example: cert.example.com
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: true
        ssl_sni_hostname:
          type: string
          description: Overrides ssl_hostname, but only for SNI in the handshake.
          example: sni.example.com
        ssl_ca_cert:
          type: string
          description: CA certificate to validate against.
          example: "-----BEGIN CERTIFICATE-----\nMIIDhTCCAm2gAwIBAgIJAJmAT7S..."
        created_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the origin was created.
          example: "2020-04-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Time-stamp (GMT) when the origin was last updated.
          example: "2020-04-01T12:00:00Z"
      required:
        - service_id
        - version
        - name
        - address

    OriginCreate:
      type: object
      properties:
        name:
          type: string
          description: Name for the origin server.
          example: My Origin Server
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the origin server.
          example: origin.example.com
        port:
          type: integer
          description: Port number of the origin server.
          example: 443
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the origin.
          example: true
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: override-origin.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 5000
        first_byte_timeout:
          type: integer
          description: How long to wait for the first byte in milliseconds.
          example: 15000
        between_bytes_timeout:
          type: integer
          description: How long to wait between bytes in milliseconds.
          example: 10000
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: iad-va-us
        ssl_cert_hostname:
          type: string
          description: Overrides ssl_hostname, but only for cert verification.
          example: cert.example.com
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: true
        ssl_sni_hostname:
          type: string
          description: Overrides ssl_hostname, but only for SNI in the handshake.
          example: sni.example.com
        ssl_ca_cert:
          type: string
          description: CA certificate to validate against.
          example: "-----BEGIN CERTIFICATE-----\nMIIDhTCCAm2gAwIBAgIJAJmAT7S..."
      required:
        - name
        - address

    OriginUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name for the origin server.
          example: Updated Origin Server
        address:
          type: string
          description: A hostname, IPv4, or IPv6 address for the origin server.
          example: updated-origin.example.com
        port:
          type: integer
          description: Port number of the origin server.
          example: 443
        use_ssl:
          type: boolean
          description: Whether or not to use SSL to reach the origin.
          example: true
        override_host:
          type: string
          description: The hostname to override the Host header.
          example: override-updated.example.com
        connect_timeout:
          type: integer
          description: How long to wait for a timeout in milliseconds.
          example: 6000
        first_byte_timeout:
          type: integer
          description: How long to wait for the first byte in milliseconds.
          example: 20000
        between_bytes_timeout:
          type: integer
          description: How long to wait between bytes in milliseconds.
          example: 15000
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: dca-dc-us
        ssl_cert_hostname:
          type: string
          description: Overrides ssl_hostname, but only for cert verification.
          example: cert-updated.example.com
        ssl_check_cert:
          type: boolean
          description: Be strict on checking SSL certs.
          example: false
        ssl_sni_hostname:
          type: string
          description: Overrides ssl_hostname, but only for SNI in the handshake.
          example: sni-updated.example.com
        ssl_ca_cert:
          type: string
          description: CA certificate to validate against.
          example: "-----BEGIN CERTIFICATE-----\nMIIDhTCCAm2gAwIBAgIJAJmAT7S..."

    Shield:
      type: object
      properties:
        name:
          type: string
          description: Name of the shield location.
          example: iad-va-us
        region:
          type: string
          description: Geographic region of the shield.
          example: us-east
        description:
          type: string
          description: Human-readable description of the shield location.
          example: Ashburn, VA, USA
        datacenter:
          type: string
          description: Physical datacenter where the shield resides.
          example: IAD
        coordinates:
          type: object
          description: Geographic coordinates of the shield.
          properties:
            latitude:
              type: number
              description: Latitude coordinate.
              example: 38.934
            longitude:
              type: number
              description: Longitude coordinate.
              example: -77.448
      required:
        - name
        - region
        - description

    BackendShield:
      type: object
      properties:
        service_id:
          type: string
          description: Alphanumeric string identifying the service.
          example: SU1Z0isxPaozGVKXdv0eY
        version:
          type: integer
          description: Integer identifying a service version.
          example: 1
        backend_name:
          type: string
          description: The name of the backend.
          example: My Backend
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: iad-va-us
        enabled:
          type: boolean
          description: Whether shielding is enabled for this backend.
          example: true
      required:
        - service_id
        - version
        - backend_name
        - shield

    BackendShieldUpdate:
      type: object
      properties:
        shield:
          type: string
          description: The shield POP designated to reduce inbound load.
          example: dca-dc-us
        enabled:
          type: boolean
          description: Whether shielding is enabled for this backend.
          example: true
      required:
        - shield

    # Account Management Schemas
    BillingAddress:
      type: object
      properties:
        address_1:
          type: string
          description: First line of address
        address_2:
          type: string
          description: Second line of address
        city:
          type: string
          description: City
        state:
          type: string
          description: State or province
        postal_code:
          type: string
          description: Postal code
        country:
          type: string
          description: Country code

    BillingAddressUpdate:
      type: object
      properties:
        address_1:
          type: string
        address_2:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string

    ServiceUsageMetrics:
      type: object
      properties:
        service_id:
          type: string
        service_name:
          type: string
        usage_units:
          type: integer
        bandwidth:
          type: number

    UsageMetrics:
      type: object
      properties:
        month:
          type: string
        year:
          type: string
        total_usage:
          type: number
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsageMetrics"

    CustomerContact:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        type:
          type: string

    CustomerContactCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        type:
          type: string
      required:
        - name
        - email

    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner_id:
          type: string
        billing_contact_id:
          type: string
        security_contact_id:
          type: string
        technical_contact_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CustomerUpdate:
      type: object
      properties:
        name:
          type: string
        billing_contact_id:
          type: string
        security_contact_id:
          type: string
        technical_contact_id:
          type: string

    Event:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        event_type:
          type: string
        description:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time

    # Authentication Schemas
    AutomationToken:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        token:
          type: string
        scope:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    AutomationTokenCreate:
      type: object
      properties:
        name:
          type: string
        scope:
          type: string
        expires_at:
          type: string
          format: date-time
      required:
        - name
        - scope

    UserToken:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        token:
          type: string
        scope:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    UserTokenCreate:
      type: object
      properties:
        name:
          type: string
        scope:
          type: string
        expires_at:
          type: string
          format: date-time
      required:
        - name

    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        name:
          type: string
        email:
          type: string
        customer_id:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        role:
          type: string

    # Security Schemas
    DdosEvent:
      type: object
      properties:
        id:
          type: string
        event_type:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        severity:
          type: string
        description:
          type: string

    DdosRule:
      type: object
      properties:
        id:
          type: string
        rule_type:
          type: string
        condition:
          type: string
        action:
          type: string
        enabled:
          type: boolean

    TlsCertificate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        certificate:
          type: string
        private_key:
          type: string
        domains:
          type: array
          items:
            type: string
        issued_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    TlsCertificateCreate:
      type: object
      properties:
        name:
          type: string
        certificate:
          type: string
        private_key:
          type: string
        domains:
          type: array
          items:
            type: string
      required:
        - name
        - certificate
        - private_key

    TlsCertificateUpdate:
      type: object
      properties:
        name:
          type: string
        certificate:
          type: string
        private_key:
          type: string

    TlsActivation:
      type: object
      properties:
        id:
          type: string
        certificate_id:
          type: string
        domains:
          type: array
          items:
            type: string
        mutual_authentication_id:
          type: string
        created_at:
          type: string
          format: date-time

    TlsActivationCreate:
      type: object
      properties:
        certificate_id:
          type: string
        domains:
          type: array
          items:
            type: string
        mutual_authentication_id:
          type: string
      required:
        - certificate_id

    TlsActivationUpdate:
      type: object
      properties:
        mutual_authentication_id:
          type: string

    MutualAuthentication:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cert_bundle:
          type: string
        enforced:
          type: boolean
        created_at:
          type: string
          format: date-time

    MutualAuthenticationCreate:
      type: object
      properties:
        name:
          type: string
        cert_bundle:
          type: string
        enforced:
          type: boolean
      required:
        - name
        - cert_bundle

    MutualAuthenticationUpdate:
      type: object
      properties:
        name:
          type: string
        cert_bundle:
          type: string
        enforced:
          type: boolean

    # VCL Object Schemas
    Condition:
      type: object
      properties:
        name:
          type: string
          description: Name of the condition
        statement:
          type: string
          description: VCL statement for the condition
        type:
          type: string
          description: Type of the condition
          enum: [REQUEST, RESPONSE, CACHE]
        priority:
          type: integer
          description: Priority of the condition

    ConditionCreate:
      type: object
      properties:
        name:
          type: string
        statement:
          type: string
        type:
          type: string
          enum: [REQUEST, RESPONSE, CACHE]
        priority:
          type: integer
      required:
        - name
        - statement
        - type

    ConditionUpdate:
      type: object
      properties:
        name:
          type: string
        statement:
          type: string
        type:
          type: string
          enum: [REQUEST, RESPONSE, CACHE]
        priority:
          type: integer

    Header:
      type: object
      properties:
        name:
          type: string
          description: Name of the header
        action:
          type: string
          description: Action to perform on the header
          enum: [set, append, delete, regex, regex_repeat]
        type:
          type: string
          description: Type of the header
          enum: [request, fetch, cache, response]
        dst:
          type: string
          description: Header name
        src:
          type: string
          description: Header value
        substitution:
          type: string
          description: Value to use for substitution
        ignore_if_set:
          type: boolean
          description: Don't add header if already set
        priority:
          type: integer
          description: Priority of the header

    HeaderCreate:
      type: object
      properties:
        name:
          type: string
        action:
          type: string
          enum: [set, append, delete, regex, regex_repeat]
        type:
          type: string
          enum: [request, fetch, cache, response]
        dst:
          type: string
        src:
          type: string
        substitution:
          type: string
        ignore_if_set:
          type: boolean
        priority:
          type: integer
      required:
        - name
        - action
        - type
        - dst

    HeaderUpdate:
      type: object
      properties:
        name:
          type: string
        action:
          type: string
          enum: [set, append, delete, regex, regex_repeat]
        type:
          type: string
          enum: [request, fetch, cache, response]
        dst:
          type: string
        src:
          type: string
        substitution:
          type: string
        ignore_if_set:
          type: boolean
        priority:
          type: integer

    GzipConfiguration:
      type: object
      properties:
        name:
          type: string
          description: Name of the gzip configuration
        content_types:
          type: string
          description: Space-separated list of content types to compress
        extensions:
          type: string
          description: Space-separated list of file extensions to compress
        cache_condition:
          type: string
          description: Name of the cache condition to apply

    GzipConfigurationCreate:
      type: object
      properties:
        name:
          type: string
        content_types:
          type: string
        extensions:
          type: string
        cache_condition:
          type: string
      required:
        - name

    GzipConfigurationUpdate:
      type: object
      properties:
        name:
          type: string
        content_types:
          type: string
        extensions:
          type: string
        cache_condition:
          type: string

    # Load Balancing Schemas
    Director:
      type: object
      properties:
        name:
          type: string
          description: Name of the director
        backends:
          type: array
          items:
            type: string
          description: List of backend names
        capacity:
          type: integer
          description: Total capacity of the director
        comment:
          type: string
          description: Comment for the director
        quorum:
          type: integer
          description: Minimum number of healthy backends
        shield:
          type: string
          description: Shield POP

    DirectorCreate:
      type: object
      properties:
        name:
          type: string
        backends:
          type: array
          items:
            type: string
        capacity:
          type: integer
        comment:
          type: string
        quorum:
          type: integer
        shield:
          type: string
      required:
        - name

    DirectorUpdate:
      type: object
      properties:
        name:
          type: string
        backends:
          type: array
          items:
            type: string
        capacity:
          type: integer
        comment:
          type: string
        quorum:
          type: integer
        shield:
          type: string

    Pool:
      type: object
      properties:
        name:
          type: string
          description: Name of the pool
        comment:
          type: string
          description: Comment for the pool
        use_tls:
          type: boolean
          description: Whether to use TLS for connections
        max_conn_default:
          type: integer
          description: Maximum connections per backend
        first_byte_timeout:
          type: integer
          description: Timeout for first byte
        quorum:
          type: integer
          description: Minimum number of healthy backends
        healthcheck:
          type: string
          description: Name of the healthcheck

    PoolCreate:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        use_tls:
          type: boolean
        max_conn_default:
          type: integer
        first_byte_timeout:
          type: integer
        quorum:
          type: integer
        healthcheck:
          type: string
      required:
        - name

    PoolUpdate:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        use_tls:
          type: boolean
        max_conn_default:
          type: integer
        first_byte_timeout:
          type: integer
        quorum:
          type: integer
        healthcheck:
          type: string

    # Utility Schemas
    Datacenter:
      type: object
      properties:
        code:
          type: string
          description: Three-letter code for the datacenter
        name:
          type: string
          description: Name of the datacenter
        group:
          type: string
          description: Group the datacenter belongs to
        coordinates:
          type: object
          properties:
            x:
              type: number
            y:
              type: number

    PublicIPList:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
          description: List of public IP addresses
        ipv6_addresses:
          type: array
          items:
            type: string
          description: List of IPv6 addresses

    ContentStatus:
      type: object
      properties:
        url:
          type: string
          description: URL that was checked
        status:
          type: object
          description: Status by POP
          additionalProperties:
            type: string

  parameters:
    service_id:
      name: service_id
      in: path
      description: |
        Unique alphanumeric identifier for a Fastly service. This immutable ID is assigned when a service is created and is used in all service-specific API operations.

        **Format**: 20-25 character alphanumeric string
        **Example**: SU1Z0isxPaozGVKXdv0eY
        **Usage**: Required for all operations on service configurations, versions, domains, backends, and other service components
        **How to obtain**: From service creation response, service listing, or Fastly control panel
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9]{20,25}$'
        example: "SU1Z0isxPaozGVKXdv0eY"

    version_id:
      name: version_id
      in: path
      description: |
        Integer identifier for a specific version of a service configuration. Versions represent immutable snapshots of service configuration that can be activated to serve traffic.

        **Format**: Positive integer starting from 1
        **Example**: 3
        **Usage**: Required for version-specific operations like modifying domains, backends, VCL, or other configuration elements
        **Version lifecycle**: Draft versions can be modified, active versions are locked and serve traffic
        **How to obtain**: From version creation response, version listing, or service details
      required: true
      schema:
        type: integer
        minimum: 1
        example: 3

    domain_id:
      name: domain_id
      in: path
      description: |
        Unique alphanumeric identifier for a domain configuration within a service. Each domain represents a hostname that Fastly will serve content for.

        **Format**: Alphanumeric string identifier
        **Example**: 6Mp4g0VKGDgRECvMZr9QJy
        **Usage**: Required for domain-specific operations like updating domain settings or removing domains from a service
        **Relationship**: Domains belong to specific service versions and are activated when the version is activated
        **How to obtain**: From domain creation response or domain listing for a service version
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9]+$'
        example: "6Mp4g0VKGDgRECvMZr9QJy"

    backend_name:
      name: backend_name
      in: path
      description: |
        Human-readable name identifier for a backend server configuration. Backend names are unique within a service version and represent origin servers that Fastly fetches content from.

        **Format**: String identifier, typically descriptive of the backend purpose
        **Example**: main-api-server
        **Usage**: Required for backend-specific operations like updating backend settings, health checks, or SSL configurations
        **Naming conventions**: Use descriptive names that identify the backend's role (e.g., 'api-server', 'static-assets', 'user-uploads')
        **How to obtain**: From backend creation response or backend listing for a service version
      required: true
      schema:
        type: string

    cache_setting_name:
      name: cache_setting_name
      in: path
      description: Name for the cache settings object.
      required: true
      schema:
        type: string

    dictionary_id:
      name: dictionary_id
      in: path
      description: Alphanumeric string identifying a Dictionary.
      required: true
      schema:
        type: string

    acl_id:
      name: acl_id
      in: path
      description: Alphanumeric string identifying an ACL.
      required: true
      schema:
        type: string

    firewall_id:
      name: firewall_id
      in: path
      description: Alphanumeric string identifying a WAF Firewall.
      required: true
      schema:
        type: string

    rule_id:
      name: rule_id
      in: path
      description: Alphanumeric string identifying a WAF rule.
      required: true
      schema:
        type: string

    rate_limit_id:
      name: rate_limit_id
      in: path
      description: Alphanumeric string identifying a Rate Limit.
      required: true
      schema:
        type: string

    purge_id:
      name: purge_id
      in: path
      description: Alphanumeric string identifying a purge request.
      required: true
      schema:
        type: string

    origin_name:
      name: origin_name
      in: path
      description: Name of the origin.
      required: true
      schema:
        type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: Bad request

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: Unauthorized

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: Record not found

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Fastly-Key
      description: API token for authentication
