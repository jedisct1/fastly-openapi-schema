components:
    parameters:
        acl_id:
            description: Alphanumeric string identifying an ACL.
            in: path
            name: acl_id
            required: true
            schema:
                type: string
        backend_name:
            description: |
                Human-readable name identifier for a backend server configuration. Backend names are unique within a service version and represent origin servers that Fastly fetches content from.

                **Format**: String identifier, typically descriptive of the backend purpose
                **Example**: main-api-server
                **Usage**: Required for backend-specific operations like updating backend settings, health checks, or SSL configurations
                **Naming conventions**: Use descriptive names that identify the backend's role (e.g., 'api-server', 'static-assets', 'user-uploads')
                **How to obtain**: From backend creation response or backend listing for a service version
            in: path
            name: backend_name
            required: true
            schema:
                type: string
        cache_setting_name:
            description: Name for the cache settings object.
            in: path
            name: cache_setting_name
            required: true
            schema:
                type: string
        dictionary_id:
            description: Alphanumeric string identifying a Dictionary.
            in: path
            name: dictionary_id
            required: true
            schema:
                type: string
        domain_id:
            description: |
                Unique alphanumeric identifier for a domain configuration within a service. Each domain represents a hostname that Fastly will serve content for.

                **Format**: Alphanumeric string identifier
                **Example**: 6Mp4g0VKGDgRECvMZr9QJy
                **Usage**: Required for domain-specific operations like updating domain settings or removing domains from a service
                **Relationship**: Domains belong to specific service versions and are activated when the version is activated
                **How to obtain**: From domain creation response or domain listing for a service version
            in: path
            name: domain_id
            required: true
            schema:
                example: 6Mp4g0VKGDgRECvMZr9QJy
                pattern: ^[A-Za-z0-9]+$
                type: string
        firewall_id:
            description: Alphanumeric string identifying a WAF Firewall.
            in: path
            name: firewall_id
            required: true
            schema:
                type: string
        origin_name:
            description: Name of the origin.
            in: path
            name: origin_name
            required: true
            schema:
                type: string
        purge_id:
            description: Alphanumeric string identifying a purge request.
            in: path
            name: purge_id
            required: true
            schema:
                type: string
        rate_limit_id:
            description: Alphanumeric string identifying a Rate Limit.
            in: path
            name: rate_limit_id
            required: true
            schema:
                type: string
        rule_id:
            description: Alphanumeric string identifying a WAF rule.
            in: path
            name: rule_id
            required: true
            schema:
                type: string
        service_id:
            description: |
                Unique alphanumeric identifier for a Fastly service. This immutable ID is assigned when a service is created and is used in all service-specific API operations.

                **Format**: 20-25 character alphanumeric string
                **Example**: SU1Z0isxPaozGVKXdv0eY
                **Usage**: Required for all operations on service configurations, versions, domains, backends, and other service components
                **How to obtain**: From service creation response, service listing, or Fastly control panel
            in: path
            name: service_id
            required: true
            schema:
                example: SU1Z0isxPaozGVKXdv0eY
                pattern: ^[A-Za-z0-9]{20,25}$
                type: string
        version_id:
            description: |
                Integer identifier for a specific version of a service configuration. Versions represent immutable snapshots of service configuration that can be activated to serve traffic.

                **Format**: Positive integer starting from 1
                **Example**: 3
                **Usage**: Required for version-specific operations like modifying domains, backends, VCL, or other configuration elements
                **Version lifecycle**: Draft versions can be modified, active versions are locked and serve traffic
                **How to obtain**: From version creation response, version listing, or service details
            in: path
            name: version_id
            required: true
            schema:
                example: 3
                minimum: 1
                type: integer
    responses:
        BadRequest:
            content:
                application/json:
                    schema:
                        properties:
                            msg:
                                example: Bad request
                                type: string
                        type: object
            description: Bad request
        NotFound:
            content:
                application/json:
                    schema:
                        properties:
                            msg:
                                example: Record not found
                                type: string
                        type: object
            description: Resource not found
        Unauthorized:
            content:
                application/json:
                    schema:
                        properties:
                            msg:
                                example: Unauthorized
                                type: string
                        type: object
            description: Unauthorized
    schemas:
        ACL:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the ACL was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying an ACL.
                    example: 6tUXdegLTf5BCig0zGFrU3
                    type: string
                name:
                    description: Name for the ACL.
                    example: my_acl
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the ACL was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - id
                - name
            type: object
        ACLCreate:
            properties:
                name:
                    description: Name for the ACL.
                    example: my_acl
                    type: string
            required:
                - name
            type: object
        ACLEntry:
            properties:
                acl_id:
                    description: Alphanumeric string identifying an ACL.
                    example: 6tUXdegLTf5BCig0zGFrU3
                    type: string
                comment:
                    description: A freeform descriptive note.
                    example: ACL entry for office
                    type: string
                created_at:
                    description: Time-stamp (GMT) when the entry was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying an ACL Entry.
                    example: 6yxNzlOpW1V7JfSwvLGtOc
                    type: string
                ip:
                    description: An IP address.
                    example: 192.168.0.1
                    type: string
                negated:
                    description: Whether to negate the match.
                    example: false
                    type: boolean
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                subnet:
                    description: Number of bits for the subnet mask applied to the IP address.
                    example: 24
                    type: integer
                updated_at:
                    description: Time-stamp (GMT) when the entry was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
            required:
                - acl_id
                - service_id
                - id
                - ip
            type: object
        ACLEntryCreate:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: ACL entry for office
                    type: string
                ip:
                    description: An IP address.
                    example: 192.168.0.1
                    type: string
                negated:
                    description: Whether to negate the match.
                    example: false
                    type: boolean
                subnet:
                    description: Number of bits for the subnet mask applied to the IP address.
                    example: 24
                    type: integer
            required:
                - ip
            type: object
        AutomationToken:
            properties:
                created_at:
                    format: date-time
                    type: string
                expires_at:
                    format: date-time
                    type: string
                id:
                    type: string
                name:
                    type: string
                scope:
                    type: string
                token:
                    type: string
            type: object
        AutomationTokenCreate:
            properties:
                expires_at:
                    format: date-time
                    type: string
                name:
                    type: string
                scope:
                    type: string
            required:
                - name
                - scope
            type: object
        Backend:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the backend.
                    example: backend.example.com
                    type: string
                auto_loadbalance:
                    description: Whether or not this backend should be automatically load balanced.
                    example: false
                    type: boolean
                between_bytes_timeout:
                    description: How long to wait between bytes in milliseconds.
                    example: 10000
                    type: integer
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 5000
                    type: integer
                max_conn:
                    description: Maximum number of connections.
                    example: 200
                    type: integer
                name:
                    description: The name of the backend.
                    example: My Backend
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: cache.example.com
                    type: string
                port:
                    description: Port number of the address.
                    example: 80
                    type: integer
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: iad-va-us
                    type: string
                ssl_cert_hostname:
                    description: Overrides ssl_hostname, but only for cert verification.
                    example: cert.example.com
                    type: string
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: true
                    type: boolean
                ssl_sni_hostname:
                    description: Overrides ssl_hostname, but only for SNI in the handshake.
                    example: sni.example.com
                    type: string
                use_ssl:
                    description: Whether or not to use SSL to reach the backend.
                    example: false
                    type: boolean
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
                weight:
                    description: Weight used to load balance this backend against others.
                    example: 100
                    type: integer
            required:
                - service_id
                - version
                - name
                - address
                - port
            type: object
        BackendCreate:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the backend.
                    example: backend.example.com
                    type: string
                auto_loadbalance:
                    description: Whether or not this backend should be automatically load balanced.
                    example: false
                    type: boolean
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 5000
                    type: integer
                max_conn:
                    description: Maximum number of connections.
                    example: 200
                    type: integer
                name:
                    description: The name of the backend.
                    example: My Backend
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: cache.example.com
                    type: string
                port:
                    description: Port number of the address.
                    example: 80
                    type: integer
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: true
                    type: boolean
                use_ssl:
                    description: Whether or not to use SSL to reach the backend.
                    example: false
                    type: boolean
                weight:
                    description: Weight used to load balance this backend against others.
                    example: 100
                    type: integer
            required:
                - name
                - address
                - port
            type: object
        BackendShield:
            properties:
                backend_name:
                    description: The name of the backend.
                    example: My Backend
                    type: string
                enabled:
                    description: Whether shielding is enabled for this backend.
                    example: true
                    type: boolean
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: iad-va-us
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - backend_name
                - shield
            type: object
        BackendShieldUpdate:
            properties:
                enabled:
                    description: Whether shielding is enabled for this backend.
                    example: true
                    type: boolean
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: dca-dc-us
                    type: string
            required:
                - shield
            type: object
        BackendUpdate:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the backend.
                    example: updated-backend.example.com
                    type: string
                auto_loadbalance:
                    description: Whether or not this backend should be automatically load balanced.
                    example: true
                    type: boolean
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 10000
                    type: integer
                max_conn:
                    description: Maximum number of connections.
                    example: 300
                    type: integer
                name:
                    description: The name of the backend.
                    example: Updated Backend
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: updated-cache.example.com
                    type: string
                port:
                    description: Port number of the address.
                    example: 443
                    type: integer
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: false
                    type: boolean
                use_ssl:
                    description: Whether or not to use SSL to reach the backend.
                    example: true
                    type: boolean
                weight:
                    description: Weight used to load balance this backend against others.
                    example: 200
                    type: integer
            type: object
        BillingAddress:
            properties:
                address_1:
                    description: First line of address
                    type: string
                address_2:
                    description: Second line of address
                    type: string
                city:
                    description: City
                    type: string
                country:
                    description: Country code
                    type: string
                postal_code:
                    description: Postal code
                    type: string
                state:
                    description: State or province
                    type: string
            type: object
        BillingAddressUpdate:
            properties:
                address_1:
                    type: string
                address_2:
                    type: string
                city:
                    type: string
                country:
                    type: string
                postal_code:
                    type: string
                state:
                    type: string
            type: object
        CacheSetting:
            properties:
                action:
                    description: One of pass, cache, or restart, indicating how to handle the cache.
                    enum:
                        - pass
                        - cache
                        - restart
                    example: cache
                    type: string
                cache_condition:
                    description: Name of the cache condition controlling when this configuration applies.
                    example: testing
                    type: string
                name:
                    description: Name for the cache settings object.
                    example: my-cache-setting
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                stale_ttl:
                    description: Maximum time to serve stale object in seconds.
                    example: 300
                    type: integer
                ttl:
                    description: Maximum time to live for the cache in seconds.
                    example: 3600
                    type: integer
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - name
                - action
            type: object
        CacheSettingCreate:
            properties:
                action:
                    description: One of pass, cache, or restart, indicating how to handle the cache.
                    enum:
                        - pass
                        - cache
                        - restart
                    example: cache
                    type: string
                cache_condition:
                    description: Name of the cache condition controlling when this configuration applies.
                    example: testing
                    type: string
                name:
                    description: Name for the cache settings object.
                    example: my-cache-setting
                    type: string
                stale_ttl:
                    description: Maximum time to serve stale object in seconds.
                    example: 300
                    type: integer
                ttl:
                    description: Maximum time to live for the cache in seconds.
                    example: 3600
                    type: integer
            required:
                - name
                - action
            type: object
        CacheSettingUpdate:
            properties:
                action:
                    description: One of pass, cache, or restart, indicating how to handle the cache.
                    enum:
                        - pass
                        - cache
                        - restart
                    example: pass
                    type: string
                cache_condition:
                    description: Name of the cache condition controlling when this configuration applies.
                    example: production
                    type: string
                name:
                    description: Name for the cache settings object.
                    example: updated-cache-setting
                    type: string
                stale_ttl:
                    description: Maximum time to serve stale object in seconds.
                    example: 600
                    type: integer
                ttl:
                    description: Maximum time to live for the cache in seconds.
                    example: 7200
                    type: integer
            type: object
        ComputeConfig:
            properties:
                backend_configs:
                    additionalProperties:
                        properties:
                            override_host:
                                description: Override host value.
                                example: api.example.com
                                type: string
                        type: object
                    description: Configuration for backend used by the Compute service.
                    type: object
                created_at:
                    description: Time-stamp (GMT) when the configuration was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                package_id:
                    description: Alphanumeric string identifying the Compute package.
                    example: b2Z8b3UjhuJYtUTztFYEpi
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the configuration was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - package_id
            type: object
        ComputeConfigUpdate:
            properties:
                backend_configs:
                    additionalProperties:
                        properties:
                            override_host:
                                description: Override host value.
                                example: api.example.com
                                type: string
                        type: object
                    description: Configuration for backend used by the Compute service.
                    type: object
                package_id:
                    description: Alphanumeric string identifying the Compute package.
                    example: b2Z8b3UjhuJYtUTztFYEpi
                    type: string
            required:
                - package_id
            type: object
        ComputePackage:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the package was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                hashsum:
                    description: SHA512 hash of the package content.
                    example: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3
                    type: string
                id:
                    description: Alphanumeric string identifying the Compute package.
                    example: b2Z8b3UjhuJYtUTztFYEpi
                    type: string
                metadata:
                    additionalProperties: true
                    description: Metadata associated with the package.
                    example:
                        language: rust
                        rustVersion: "1.53"
                    type: object
                name:
                    description: Name of the Compute package.
                    example: my-compute-package
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                size:
                    description: Size of the package in bytes.
                    example: 3.145728e+06
                    type: integer
                updated_at:
                    description: Time-stamp (GMT) when the package was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying the package version number.
                    example: 1
                    type: integer
            required:
                - id
                - service_id
                - version
                - name
                - size
                - hashsum
            type: object
        Condition:
            properties:
                name:
                    description: Name of the condition
                    type: string
                priority:
                    description: Priority of the condition
                    type: integer
                statement:
                    description: VCL statement for the condition
                    type: string
                type:
                    description: Type of the condition
                    enum:
                        - REQUEST
                        - RESPONSE
                        - CACHE
                    type: string
            type: object
        ConditionCreate:
            properties:
                name:
                    type: string
                priority:
                    type: integer
                statement:
                    type: string
                type:
                    enum:
                        - REQUEST
                        - RESPONSE
                        - CACHE
                    type: string
            required:
                - name
                - statement
                - type
            type: object
        ConditionUpdate:
            properties:
                name:
                    type: string
                priority:
                    type: integer
                statement:
                    type: string
                type:
                    enum:
                        - REQUEST
                        - RESPONSE
                        - CACHE
                    type: string
            type: object
        ContentStatus:
            properties:
                status:
                    additionalProperties:
                        type: string
                    description: Status by POP
                    type: object
                url:
                    description: URL that was checked
                    type: string
            type: object
        Customer:
            properties:
                billing_contact_id:
                    type: string
                created_at:
                    format: date-time
                    type: string
                id:
                    type: string
                name:
                    type: string
                owner_id:
                    type: string
                security_contact_id:
                    type: string
                technical_contact_id:
                    type: string
                updated_at:
                    format: date-time
                    type: string
            type: object
        CustomerContact:
            properties:
                customer_id:
                    type: string
                email:
                    type: string
                id:
                    type: string
                name:
                    type: string
                phone:
                    type: string
                type:
                    type: string
            type: object
        CustomerContactCreate:
            properties:
                email:
                    type: string
                name:
                    type: string
                phone:
                    type: string
                type:
                    type: string
            required:
                - name
                - email
            type: object
        CustomerUpdate:
            properties:
                billing_contact_id:
                    type: string
                name:
                    type: string
                security_contact_id:
                    type: string
                technical_contact_id:
                    type: string
            type: object
        Datacenter:
            properties:
                code:
                    description: Three-letter code for the datacenter
                    type: string
                coordinates:
                    properties:
                        x:
                            type: number
                        "y":
                            type: number
                    type: object
                group:
                    description: Group the datacenter belongs to
                    type: string
                name:
                    description: Name of the datacenter
                    type: string
            type: object
        DdosEvent:
            properties:
                description:
                    type: string
                end_time:
                    format: date-time
                    type: string
                event_type:
                    type: string
                id:
                    type: string
                severity:
                    type: string
                start_time:
                    format: date-time
                    type: string
            type: object
        DdosRule:
            properties:
                action:
                    type: string
                condition:
                    type: string
                enabled:
                    type: boolean
                id:
                    type: string
                rule_type:
                    type: string
            type: object
        Dictionary:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the dictionary was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying a Dictionary.
                    example: 5BUHk1vCIFZXlWdH41W3QK
                    type: string
                name:
                    description: Name for the Dictionary.
                    example: my_dictionary
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the dictionary was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
                write_only:
                    description: Determines if items in the dictionary are readable or not.
                    example: false
                    type: boolean
            required:
                - service_id
                - version
                - id
                - name
            type: object
        DictionaryCreate:
            properties:
                name:
                    description: Name for the Dictionary.
                    example: my_dictionary
                    type: string
                write_only:
                    description: Determines if items in the dictionary are readable or not.
                    example: false
                    type: boolean
            required:
                - name
            type: object
        DictionaryItem:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the dictionary item was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                dictionary_id:
                    description: Alphanumeric string identifying a Dictionary.
                    example: 5BUHk1vCIFZXlWdH41W3QK
                    type: string
                item_key:
                    description: Dictionary item key.
                    example: some-key
                    type: string
                item_value:
                    description: Dictionary item value.
                    example: some-value
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the dictionary item was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
            required:
                - dictionary_id
                - service_id
                - item_key
                - item_value
            type: object
        DictionaryItemCreate:
            properties:
                item_key:
                    description: Dictionary item key.
                    example: some-key
                    type: string
                item_value:
                    description: Dictionary item value.
                    example: some-value
                    type: string
            required:
                - item_key
                - item_value
            type: object
        Director:
            properties:
                backends:
                    description: List of backend names
                    items:
                        type: string
                    type: array
                capacity:
                    description: Total capacity of the director
                    type: integer
                comment:
                    description: Comment for the director
                    type: string
                name:
                    description: Name of the director
                    type: string
                quorum:
                    description: Minimum number of healthy backends
                    type: integer
                shield:
                    description: Shield POP
                    type: string
            type: object
        DirectorCreate:
            properties:
                backends:
                    items:
                        type: string
                    type: array
                capacity:
                    type: integer
                comment:
                    type: string
                name:
                    type: string
                quorum:
                    type: integer
                shield:
                    type: string
            required:
                - name
            type: object
        DirectorUpdate:
            properties:
                backends:
                    items:
                        type: string
                    type: array
                capacity:
                    type: integer
                comment:
                    type: string
                name:
                    type: string
                quorum:
                    type: integer
                shield:
                    type: string
            type: object
        Domain:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: Domain for website
                    type: string
                id:
                    description: Alphanumeric string identifying the domain.
                    example: 1Z1MqLPfXE1plDLBzF1xin
                    type: string
                name:
                    description: The name of the domain or domains associated with this service.
                    example: www.example.com
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - id
                - service_id
                - version
                - name
            type: object
        DomainCreate:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: Domain for website
                    type: string
                name:
                    description: The name of the domain or domains associated with this service.
                    example: www.example.com
                    type: string
            required:
                - name
            type: object
        DomainUpdate:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: Updated domain for website
                    type: string
                name:
                    description: The name of the domain or domains associated with this service.
                    example: updated.example.com
                    type: string
            type: object
        Event:
            properties:
                created_at:
                    format: date-time
                    type: string
                customer_id:
                    type: string
                description:
                    type: string
                event_type:
                    type: string
                id:
                    type: string
                metadata:
                    type: object
            type: object
        GzipConfiguration:
            properties:
                cache_condition:
                    description: Name of the cache condition to apply
                    type: string
                content_types:
                    description: Space-separated list of content types to compress
                    type: string
                extensions:
                    description: Space-separated list of file extensions to compress
                    type: string
                name:
                    description: Name of the gzip configuration
                    type: string
            type: object
        GzipConfigurationCreate:
            properties:
                cache_condition:
                    type: string
                content_types:
                    type: string
                extensions:
                    type: string
                name:
                    type: string
            required:
                - name
            type: object
        GzipConfigurationUpdate:
            properties:
                cache_condition:
                    type: string
                content_types:
                    type: string
                extensions:
                    type: string
                name:
                    type: string
            type: object
        Header:
            properties:
                action:
                    description: Action to perform on the header
                    enum:
                        - set
                        - append
                        - delete
                        - regex
                        - regex_repeat
                    type: string
                dst:
                    description: Header name
                    type: string
                ignore_if_set:
                    description: Don't add header if already set
                    type: boolean
                name:
                    description: Name of the header
                    type: string
                priority:
                    description: Priority of the header
                    type: integer
                src:
                    description: Header value
                    type: string
                substitution:
                    description: Value to use for substitution
                    type: string
                type:
                    description: Type of the header
                    enum:
                        - request
                        - fetch
                        - cache
                        - response
                    type: string
            type: object
        HeaderCreate:
            properties:
                action:
                    enum:
                        - set
                        - append
                        - delete
                        - regex
                        - regex_repeat
                    type: string
                dst:
                    type: string
                ignore_if_set:
                    type: boolean
                name:
                    type: string
                priority:
                    type: integer
                src:
                    type: string
                substitution:
                    type: string
                type:
                    enum:
                        - request
                        - fetch
                        - cache
                        - response
                    type: string
            required:
                - name
                - action
                - type
                - dst
            type: object
        HeaderUpdate:
            properties:
                action:
                    enum:
                        - set
                        - append
                        - delete
                        - regex
                        - regex_repeat
                    type: string
                dst:
                    type: string
                ignore_if_set:
                    type: boolean
                name:
                    type: string
                priority:
                    type: integer
                src:
                    type: string
                substitution:
                    type: string
                type:
                    enum:
                        - request
                        - fetch
                        - cache
                        - response
                    type: string
            type: object
        Healthcheck:
            properties:
                check_interval:
                    description: How often to run the healthcheck in milliseconds.
                    example: 10000
                    type: integer
                expected_response:
                    description: The status code expected from the host.
                    example: 200
                    type: integer
                host:
                    description: The host header to send.
                    example: example.com
                    type: string
                http_version:
                    description: Whether to use version 1.0 or 1.1 HTTP.
                    example: "1.1"
                    type: string
                initial:
                    description: When loading a config, the initial number of probes to be seen as OK.
                    example: 2
                    type: integer
                method:
                    description: Which HTTP method to use.
                    example: HEAD
                    type: string
                name:
                    description: The name of the healthcheck.
                    example: test-healthcheck
                    type: string
                path:
                    description: The path to check.
                    example: /health
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                threshold:
                    description: How many healthchecks must succeed to be considered healthy.
                    example: 3
                    type: integer
                timeout:
                    description: Timeout in milliseconds.
                    example: 5000
                    type: integer
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
                window:
                    description: The number of most recent healthcheck queries to keep for this healthcheck.
                    example: 5
                    type: integer
            required:
                - service_id
                - version
                - name
                - host
                - path
            type: object
        HealthcheckCreate:
            properties:
                check_interval:
                    description: How often to run the healthcheck in milliseconds.
                    example: 10000
                    type: integer
                expected_response:
                    description: The status code expected from the host.
                    example: 200
                    type: integer
                host:
                    description: The host header to send.
                    example: example.com
                    type: string
                http_version:
                    description: Whether to use version 1.0 or 1.1 HTTP.
                    example: "1.1"
                    type: string
                initial:
                    description: When loading a config, the initial number of probes to be seen as OK.
                    example: 2
                    type: integer
                method:
                    description: Which HTTP method to use.
                    example: HEAD
                    type: string
                name:
                    description: The name of the healthcheck.
                    example: test-healthcheck
                    type: string
                path:
                    description: The path to check.
                    example: /health
                    type: string
                threshold:
                    description: How many healthchecks must succeed to be considered healthy.
                    example: 3
                    type: integer
                timeout:
                    description: Timeout in milliseconds.
                    example: 5000
                    type: integer
                window:
                    description: The number of most recent healthcheck queries to keep for this healthcheck.
                    example: 5
                    type: integer
            required:
                - name
                - host
                - path
            type: object
        HistoricalStats:
            properties:
                data:
                    description: The historical data points.
                    items:
                        properties:
                            name:
                                description: Name of the service.
                                example: My Service
                                type: string
                            service_id:
                                description: Alphanumeric string identifying the service.
                                example: SU1Z0isxPaozGVKXdv0eY
                                type: string
                            timestamp:
                                description: Timestamp for this data point.
                                example: "2020-01-01T00:00:00Z"
                                format: date-time
                                type: string
                            value:
                                description: Value of the requested metric for this time period.
                                example: 1.5e+07
                                type: number
                        type: object
                    type: array
                meta:
                    description: Metadata about the request.
                    properties:
                        by:
                            description: Granularity of the data points.
                            example: month
                            type: string
                        from:
                            description: Start time for the stat window.
                            example: "2020-01-01T00:00:00Z"
                            format: date-time
                            type: string
                        metric:
                            description: The metric being reported.
                            example: requests
                            type: string
                        region:
                            description: Geographic region for the stats.
                            example: all
                            type: string
                        to:
                            description: End time for the stat window.
                            example: "2020-04-01T00:00:00Z"
                            format: date-time
                            type: string
                    type: object
                status:
                    description: Status of the request.
                    example: success
                    type: string
            type: object
        LoggingS3:
            properties:
                access_key:
                    description: Your S3 account access key.
                    example: S3ACCESSKEY
                    type: string
                bucket_name:
                    description: The name of the S3 bucket.
                    example: my-bucket
                    type: string
                domain:
                    description: The domain of the S3 endpoint.
                    example: s3.amazonaws.com
                    type: string
                format:
                    description: Apache style log formatting.
                    example: '%h %l %u %t %r %>s'
                    type: string
                format_version:
                    description: The version of the custom logging format used for the configured endpoint.
                    enum:
                        - 1
                        - 2
                    example: 2
                    type: integer
                gzip_level:
                    description: What level of GZIP encoding to have when dumping logs (0-9).
                    example: 9
                    type: integer
                name:
                    description: The name for the real-time logging configuration.
                    example: my-s3-logging
                    type: string
                path:
                    description: The path to upload logs to.
                    example: /my_log_path
                    type: string
                period:
                    description: How frequently log files are finalized so they can be available for reading (in seconds).
                    example: 3600
                    type: integer
                placement:
                    description: Where in the generated VCL the logging call should be placed.
                    enum:
                        - none
                        - waf_debug
                    example: none
                    type: string
                redundancy:
                    description: The S3 redundancy level.
                    enum:
                        - standard
                        - reduced_redundancy
                    example: standard
                    type: string
                response_condition:
                    description: The name of an existing condition in the configured endpoint.
                    example: Response Condition
                    type: string
                secret_key:
                    description: Your S3 account secret key.
                    example: S3SECRETKEY
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                timestamp_format:
                    description: A timestamp format.
                    example: '%Y-%m-%dT%H:%M:%S.000'
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - name
                - bucket_name
                - access_key
                - secret_key
            type: object
        LoggingS3Create:
            properties:
                access_key:
                    description: Your S3 account access key.
                    example: S3ACCESSKEY
                    type: string
                bucket_name:
                    description: The name of the S3 bucket.
                    example: my-bucket
                    type: string
                domain:
                    description: The domain of the S3 endpoint.
                    example: s3.amazonaws.com
                    type: string
                format:
                    description: Apache style log formatting.
                    example: '%h %l %u %t %r %>s'
                    type: string
                format_version:
                    description: The version of the custom logging format used for the configured endpoint.
                    enum:
                        - 1
                        - 2
                    example: 2
                    type: integer
                gzip_level:
                    description: What level of GZIP encoding to have when dumping logs (0-9).
                    example: 9
                    type: integer
                name:
                    description: The name for the real-time logging configuration.
                    example: my-s3-logging
                    type: string
                path:
                    description: The path to upload logs to.
                    example: /my_log_path
                    type: string
                period:
                    description: How frequently log files are finalized so they can be available for reading (in seconds).
                    example: 3600
                    type: integer
                placement:
                    description: Where in the generated VCL the logging call should be placed.
                    enum:
                        - none
                        - waf_debug
                    example: none
                    type: string
                redundancy:
                    description: The S3 redundancy level.
                    enum:
                        - standard
                        - reduced_redundancy
                    example: standard
                    type: string
                response_condition:
                    description: The name of an existing condition in the configured endpoint.
                    example: Response Condition
                    type: string
                secret_key:
                    description: Your S3 account secret key.
                    example: S3SECRETKEY
                    type: string
                timestamp_format:
                    description: A timestamp format.
                    example: '%Y-%m-%dT%H:%M:%S.000'
                    type: string
            required:
                - name
                - bucket_name
                - access_key
                - secret_key
            type: object
        MutualAuthentication:
            properties:
                cert_bundle:
                    type: string
                created_at:
                    format: date-time
                    type: string
                enforced:
                    type: boolean
                id:
                    type: string
                name:
                    type: string
            type: object
        MutualAuthenticationCreate:
            properties:
                cert_bundle:
                    type: string
                enforced:
                    type: boolean
                name:
                    type: string
            required:
                - name
                - cert_bundle
            type: object
        MutualAuthenticationUpdate:
            properties:
                cert_bundle:
                    type: string
                enforced:
                    type: boolean
                name:
                    type: string
            type: object
        Origin:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the origin server.
                    example: origin.example.com
                    type: string
                between_bytes_timeout:
                    description: How long to wait between bytes in milliseconds.
                    example: 10000
                    type: integer
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 5000
                    type: integer
                created_at:
                    description: Time-stamp (GMT) when the origin was created.
                    example: "2020-04-01T12:00:00Z"
                    format: date-time
                    type: string
                first_byte_timeout:
                    description: How long to wait for the first byte in milliseconds.
                    example: 15000
                    type: integer
                name:
                    description: Name for the origin server.
                    example: My Origin Server
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: override-origin.example.com
                    type: string
                port:
                    description: Port number of the origin server.
                    example: 443
                    type: integer
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: iad-va-us
                    type: string
                shield_region:
                    description: Geographic region of the shield.
                    example: us-east
                    type: string
                ssl_ca_cert:
                    description: CA certificate to validate against.
                    example: |-
                        -----BEGIN CERTIFICATE-----
                        MIIDhTCCAm2gAwIBAgIJAJmAT7S...
                    type: string
                ssl_cert_hostname:
                    description: Overrides ssl_hostname, but only for cert verification.
                    example: cert.example.com
                    type: string
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: true
                    type: boolean
                ssl_sni_hostname:
                    description: Overrides ssl_hostname, but only for SNI in the handshake.
                    example: sni.example.com
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the origin was last updated.
                    example: "2020-04-01T12:00:00Z"
                    format: date-time
                    type: string
                use_ssl:
                    description: Whether or not to use SSL to reach the origin.
                    example: true
                    type: boolean
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - name
                - address
            type: object
        OriginCreate:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the origin server.
                    example: origin.example.com
                    type: string
                between_bytes_timeout:
                    description: How long to wait between bytes in milliseconds.
                    example: 10000
                    type: integer
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 5000
                    type: integer
                first_byte_timeout:
                    description: How long to wait for the first byte in milliseconds.
                    example: 15000
                    type: integer
                name:
                    description: Name for the origin server.
                    example: My Origin Server
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: override-origin.example.com
                    type: string
                port:
                    description: Port number of the origin server.
                    example: 443
                    type: integer
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: iad-va-us
                    type: string
                ssl_ca_cert:
                    description: CA certificate to validate against.
                    example: |-
                        -----BEGIN CERTIFICATE-----
                        MIIDhTCCAm2gAwIBAgIJAJmAT7S...
                    type: string
                ssl_cert_hostname:
                    description: Overrides ssl_hostname, but only for cert verification.
                    example: cert.example.com
                    type: string
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: true
                    type: boolean
                ssl_sni_hostname:
                    description: Overrides ssl_hostname, but only for SNI in the handshake.
                    example: sni.example.com
                    type: string
                use_ssl:
                    description: Whether or not to use SSL to reach the origin.
                    example: true
                    type: boolean
            required:
                - name
                - address
            type: object
        OriginUpdate:
            properties:
                address:
                    description: A hostname, IPv4, or IPv6 address for the origin server.
                    example: updated-origin.example.com
                    type: string
                between_bytes_timeout:
                    description: How long to wait between bytes in milliseconds.
                    example: 15000
                    type: integer
                connect_timeout:
                    description: How long to wait for a timeout in milliseconds.
                    example: 6000
                    type: integer
                first_byte_timeout:
                    description: How long to wait for the first byte in milliseconds.
                    example: 20000
                    type: integer
                name:
                    description: Name for the origin server.
                    example: Updated Origin Server
                    type: string
                override_host:
                    description: The hostname to override the Host header.
                    example: override-updated.example.com
                    type: string
                port:
                    description: Port number of the origin server.
                    example: 443
                    type: integer
                shield:
                    description: The shield POP designated to reduce inbound load.
                    example: dca-dc-us
                    type: string
                ssl_ca_cert:
                    description: CA certificate to validate against.
                    example: |-
                        -----BEGIN CERTIFICATE-----
                        MIIDhTCCAm2gAwIBAgIJAJmAT7S...
                    type: string
                ssl_cert_hostname:
                    description: Overrides ssl_hostname, but only for cert verification.
                    example: cert-updated.example.com
                    type: string
                ssl_check_cert:
                    description: Be strict on checking SSL certs.
                    example: false
                    type: boolean
                ssl_sni_hostname:
                    description: Overrides ssl_hostname, but only for SNI in the handshake.
                    example: sni-updated.example.com
                    type: string
                use_ssl:
                    description: Whether or not to use SSL to reach the origin.
                    example: true
                    type: boolean
            type: object
        Pool:
            properties:
                comment:
                    description: Comment for the pool
                    type: string
                first_byte_timeout:
                    description: Timeout for first byte
                    type: integer
                healthcheck:
                    description: Name of the healthcheck
                    type: string
                max_conn_default:
                    description: Maximum connections per backend
                    type: integer
                name:
                    description: Name of the pool
                    type: string
                quorum:
                    description: Minimum number of healthy backends
                    type: integer
                use_tls:
                    description: Whether to use TLS for connections
                    type: boolean
            type: object
        PoolCreate:
            properties:
                comment:
                    type: string
                first_byte_timeout:
                    type: integer
                healthcheck:
                    type: string
                max_conn_default:
                    type: integer
                name:
                    type: string
                quorum:
                    type: integer
                use_tls:
                    type: boolean
            required:
                - name
            type: object
        PoolUpdate:
            properties:
                comment:
                    type: string
                first_byte_timeout:
                    type: integer
                healthcheck:
                    type: string
                max_conn_default:
                    type: integer
                name:
                    type: string
                quorum:
                    type: integer
                use_tls:
                    type: boolean
            type: object
        PublicIPList:
            properties:
                addresses:
                    description: List of public IP addresses
                    items:
                        type: string
                    type: array
                ipv6_addresses:
                    description: List of IPv6 addresses
                    items:
                        type: string
                    type: array
            type: object
        PurgeResponse:
            properties:
                id:
                    description: Alphanumeric string identifying the purge request.
                    example: 3ZUs9oXQ3ztxEwJRQUcMRG
                    type: string
                status:
                    description: Status of the purge request.
                    example: ok
                    type: string
                surrogate_keys:
                    description: The surrogate keys that were purged.
                    example:
                        - key1
                        - key2
                    items:
                        type: string
                    type: array
            required:
                - status
                - id
            type: object
        PurgeStatus:
            properties:
                completed_at:
                    description: Time-stamp (GMT) when the purge request completed.
                    example: "2020-04-01T12:30:15Z"
                    format: date-time
                    type: string
                created_at:
                    description: Time-stamp (GMT) when the purge request was created.
                    example: "2020-04-01T12:30:00Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying the purge request.
                    example: 3ZUs9oXQ3ztxEwJRQUcMRG
                    type: string
                object:
                    description: Object that was purged (URL, key, etc).
                    example: key1
                    type: string
                object_type:
                    description: Type of object that was purged.
                    enum:
                        - url
                        - surrogate-key
                        - all
                    example: surrogate-key
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                started_at:
                    description: Time-stamp (GMT) when the purge request started processing.
                    example: "2020-04-01T12:30:01Z"
                    format: date-time
                    type: string
                status:
                    description: Current status of the purge request.
                    enum:
                        - in_progress
                        - complete
                        - failed
                    example: complete
                    type: string
            required:
                - status
                - id
                - created_at
                - service_id
            type: object
        RateLimit:
            properties:
                action:
                    description: The action to take when a rate limit is exceeded.
                    enum:
                        - response
                        - response_object
                        - custom_response
                    example: response
                    type: string
                client_key:
                    description: Array of VCL variables used to generate a counter key to identify a client.
                    example:
                        - req.http.Fastly-Client-IP
                        - req.http.User-Agent
                    items:
                        type: string
                    type: array
                created_at:
                    description: Time-stamp (GMT) when the rate limit was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                http_methods:
                    description: Array of HTTP methods to match.
                    example:
                        - GET
                        - POST
                    items:
                        enum:
                            - GET
                            - POST
                            - PUT
                            - PATCH
                            - DELETE
                            - HEAD
                            - OPTIONS
                        type: string
                    type: array
                id:
                    description: Alphanumeric string identifying a Rate Limit.
                    example: 3M74CpUYEpZIQhK4DfUQtr
                    type: string
                name:
                    description: A human readable name for the rate limiting rule.
                    example: My Rate Limit
                    type: string
                penalty_box_duration:
                    description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
                    example: 60
                    type: integer
                response:
                    description: Custom response to be sent when the rate limit is exceeded.
                    properties:
                        content:
                            description: Response body content.
                            example: '{"error": "rate limit exceeded"}'
                            type: string
                        content_type:
                            description: MIME type for the response.
                            example: application/json
                            type: string
                        status:
                            description: HTTP status code for the response.
                            example: 429
                            type: integer
                    type: object
                rps_limit:
                    description: Upper limit of requests per second allowed.
                    example: 10
                    type: integer
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the rate limit was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                uri:
                    description: The URI pattern to match.
                    example: /api/*
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
                window_size:
                    description: Number of seconds during which the RPS limit is calculated.
                    example: 60
                    type: integer
            required:
                - service_id
                - version
                - id
                - name
                - uri
                - rps_limit
                - action
            type: object
        RateLimitCreate:
            properties:
                action:
                    description: The action to take when a rate limit is exceeded.
                    enum:
                        - response
                        - response_object
                        - custom_response
                    example: response
                    type: string
                client_key:
                    description: Array of VCL variables used to generate a counter key to identify a client.
                    example:
                        - req.http.Fastly-Client-IP
                        - req.http.User-Agent
                    items:
                        type: string
                    type: array
                http_methods:
                    description: Array of HTTP methods to match.
                    example:
                        - GET
                        - POST
                    items:
                        enum:
                            - GET
                            - POST
                            - PUT
                            - PATCH
                            - DELETE
                            - HEAD
                            - OPTIONS
                        type: string
                    type: array
                name:
                    description: A human readable name for the rate limiting rule.
                    example: My Rate Limit
                    type: string
                penalty_box_duration:
                    description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
                    example: 60
                    type: integer
                response:
                    description: Custom response to be sent when the rate limit is exceeded.
                    properties:
                        content:
                            description: Response body content.
                            example: '{"error": "rate limit exceeded"}'
                            type: string
                        content_type:
                            description: MIME type for the response.
                            example: application/json
                            type: string
                        status:
                            description: HTTP status code for the response.
                            example: 429
                            type: integer
                    type: object
                rps_limit:
                    description: Upper limit of requests per second allowed.
                    example: 10
                    type: integer
                uri:
                    description: The URI pattern to match.
                    example: /api/*
                    type: string
                window_size:
                    description: Number of seconds during which the RPS limit is calculated.
                    example: 60
                    type: integer
            required:
                - name
                - uri
                - rps_limit
                - action
            type: object
        RateLimitUpdate:
            properties:
                action:
                    description: The action to take when a rate limit is exceeded.
                    enum:
                        - response
                        - response_object
                        - custom_response
                    example: custom_response
                    type: string
                client_key:
                    description: Array of VCL variables used to generate a counter key to identify a client.
                    example:
                        - req.http.Fastly-Client-IP
                        - req.http.User-Agent
                        - req.http.Authorization
                    items:
                        type: string
                    type: array
                http_methods:
                    description: Array of HTTP methods to match.
                    example:
                        - GET
                        - POST
                        - PUT
                    items:
                        enum:
                            - GET
                            - POST
                            - PUT
                            - PATCH
                            - DELETE
                            - HEAD
                            - OPTIONS
                        type: string
                    type: array
                name:
                    description: A human readable name for the rate limiting rule.
                    example: Updated Rate Limit
                    type: string
                penalty_box_duration:
                    description: Length of time in seconds that the rate limit client entry is kept in the penalty box.
                    example: 120
                    type: integer
                response:
                    description: Custom response to be sent when the rate limit is exceeded.
                    properties:
                        content:
                            description: Response body content.
                            example: '{"error": "too many requests", "retry_after": 60}'
                            type: string
                        content_type:
                            description: MIME type for the response.
                            example: application/json
                            type: string
                        status:
                            description: HTTP status code for the response.
                            example: 429
                            type: integer
                    type: object
                rps_limit:
                    description: Upper limit of requests per second allowed.
                    example: 20
                    type: integer
                uri:
                    description: The URI pattern to match.
                    example: /api/v2/*
                    type: string
                window_size:
                    description: Number of seconds during which the RPS limit is calculated.
                    example: 120
                    type: integer
            type: object
        RealtimeMetrics:
            properties:
                data:
                    description: Array of realtime data points.
                    items:
                        properties:
                            bereq_body_bytes:
                                description: Backend request body bytes.
                                example: 98765
                                type: integer
                            bereq_header_bytes:
                                description: Backend request header bytes.
                                example: 12345
                                type: integer
                            errors:
                                description: Number of errors.
                                example: 4
                                type: integer
                            hits:
                                description: Number of cache hits.
                                example: 1000
                                type: integer
                            log_bytes:
                                description: Log bytes generated.
                                example: 54321
                                type: integer
                            miss:
                                description: Number of cache misses.
                                example: 234
                                type: integer
                            recorded:
                                description: Time when this data point was recorded.
                                example: "2020-04-02T15:01:23Z"
                                format: date-time
                                type: string
                            requests:
                                description: Number of requests in this time window.
                                example: 1234
                                type: integer
                            resp_body_bytes:
                                description: Response body bytes served.
                                example: 9.876543e+06
                                type: integer
                            resp_header_bytes:
                                description: Response header bytes served.
                                example: 123456
                                type: integer
                            status_1xx:
                                description: Number of 1xx status responses.
                                example: 0
                                type: integer
                            status_2xx:
                                description: Number of 2xx status responses.
                                example: 1000
                                type: integer
                            status_3xx:
                                description: Number of 3xx status responses.
                                example: 200
                                type: integer
                            status_4xx:
                                description: Number of 4xx status responses.
                                example: 30
                                type: integer
                            status_5xx:
                                description: Number of 5xx status responses.
                                example: 4
                                type: integer
                            uncacheable:
                                description: Number of uncacheable requests.
                                example: 30
                                type: integer
                        type: object
                    type: array
                timestamp:
                    description: Timestamp of the data point.
                    example: "2020-04-02T15:01:23Z"
                    format: date-time
                    type: string
            type: object
        Service:
            description: |
                Represents a Fastly service configuration. A service is the top-level organizational unit that contains all CDN configurations for a specific application or website.
            properties:
                active_version:
                    description: |
                        Information about the currently active (live) version of this service.
                        The active version serves production traffic and cannot be modified.
                    properties:
                        deployed:
                            description: Whether this version is currently deployed to the edge
                            example: true
                            type: boolean
                        locked:
                            description: Whether the active version is locked and cannot be modified
                            example: true
                            type: boolean
                        number:
                            description: |
                                Version number of the currently active service configuration.
                                This version is serving live traffic and is locked from modification.
                            example: 3
                            minimum: 1
                            type: integer
                    type: object
                comment:
                    description: |
                        Optional descriptive note or documentation for the service.
                        Use this field to document the service purpose, configuration notes, or team ownership information.
                    example: Production CDN for main website - handles static assets and API acceleration
                    maxLength: 500
                    type: string
                created_at:
                    description: |
                        ISO 8601 timestamp when the service was initially created.
                        This timestamp is immutable and tracks the service lifecycle.
                    example: "2023-01-15T10:30:00Z"
                    format: date-time
                    type: string
                customer_id:
                    description: |
                        Unique identifier for the customer account that owns this service.
                        This establishes the billing and access control context for the service.
                    example: x4xCwxxJxGCx123Rx5xTx
                    pattern: ^[A-Za-z0-9]+$
                    type: string
                id:
                    description: |
                        Unique alphanumeric identifier for the service. This immutable ID is used in all API operations referencing this service.
                        Format: Alphanumeric string, typically 20-25 characters
                        Usage: Required for all service-specific API endpoints
                    example: SU1Z0isxPaozGVKXdv0eY
                    pattern: ^[A-Za-z0-9]{20,25}$
                    type: string
                name:
                    description: |
                        Human-readable name for the service. This name appears in the Fastly control panel, logs, and monitoring systems.
                        Constraints: Must be unique within the customer account
                        Best practices: Use descriptive names that identify the application or purpose
                    example: my-website-cdn
                    maxLength: 100
                    minLength: 1
                    type: string
                paused:
                    description: |
                        Whether the service is currently paused.
                        Paused services do not serve traffic but preserve all configurations.
                    example: false
                    type: boolean
                type:
                    description: |
                        Service type indicating the Fastly platform and features available.
                        - vcl: Traditional VCL-based service with full customization
                        - wasm: Compute@Edge service using WebAssembly
                    enum:
                        - vcl
                        - wasm
                    example: vcl
                    type: string
                updated_at:
                    description: |
                        ISO 8601 timestamp when the service metadata was last modified.
                        This updates when service name, comment, or other metadata changes (not version-specific changes).
                    example: "2023-10-20T14:45:00Z"
                    format: date-time
                    type: string
                versions:
                    description: |
                        Total number of versions created for this service (active and inactive).
                        Each version represents a snapshot of the service configuration.
                    example: 5
                    minimum: 1
                    type: integer
            required:
                - id
                - name
                - customer_id
                - type
                - created_at
                - updated_at
            type: object
        ServiceCreate:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: New service
                    type: string
                name:
                    description: The name of the service.
                    example: My Service
                    type: string
                type:
                    description: The type of this service.
                    enum:
                        - vcl
                        - wasm
                    example: vcl
                    type: string
            required:
                - name
                - type
            type: object
        ServiceUpdate:
            properties:
                comment:
                    description: A freeform descriptive note.
                    example: Updated service
                    type: string
                name:
                    description: The name of the service.
                    example: Updated Service Name
                    type: string
            type: object
        ServiceUsageMetrics:
            properties:
                bandwidth:
                    type: number
                service_id:
                    type: string
                service_name:
                    type: string
                usage_units:
                    type: integer
            type: object
        Shield:
            properties:
                coordinates:
                    description: Geographic coordinates of the shield.
                    properties:
                        latitude:
                            description: Latitude coordinate.
                            example: 38.934
                            type: number
                        longitude:
                            description: Longitude coordinate.
                            example: -77.448
                            type: number
                    type: object
                datacenter:
                    description: Physical datacenter where the shield resides.
                    example: IAD
                    type: string
                description:
                    description: Human-readable description of the shield location.
                    example: Ashburn, VA, USA
                    type: string
                name:
                    description: Name of the shield location.
                    example: iad-va-us
                    type: string
                region:
                    description: Geographic region of the shield.
                    example: us-east
                    type: string
            required:
                - name
                - region
                - description
            type: object
        Stats:
            properties:
                data:
                    description: The actual stats data.
                    items:
                        properties:
                            bandwidth:
                                description: Total bandwidth used in bytes.
                                example: 9.87654321e+09
                                type: integer
                            errors:
                                description: Number of errors.
                                example: 1234
                                type: integer
                            hits:
                                description: Number of cache hits.
                                example: 987654
                                type: integer
                            hits_time:
                                description: Total time spent processing cache hits in milliseconds.
                                example: 324543.21
                                format: float
                                type: number
                            miss:
                                description: Number of cache misses.
                                example: 246913
                                type: integer
                            miss_time:
                                description: Total time spent processing cache misses in milliseconds.
                                example: 892365.42
                                format: float
                                type: number
                            pipe:
                                description: Number of pipe requests.
                                example: 321
                                type: integer
                            requests:
                                description: Number of requests processed.
                                example: 1.234567e+06
                                type: integer
                            timestamp:
                                description: Timestamp for this data point.
                                example: "2020-04-01T12:00:00Z"
                                format: date-time
                                type: string
                            uncacheable:
                                description: Number of uncacheable requests.
                                example: 4567
                                type: integer
                        type: object
                    type: array
                meta:
                    description: Metadata about the request.
                    properties:
                        by:
                            description: Granularity of the stats.
                            example: day
                            type: string
                        from:
                            description: Start time for the stat window.
                            example: "2020-04-01T00:00:00Z"
                            format: date-time
                            type: string
                        region:
                            description: Geographic region for which stats were requested.
                            example: all
                            type: string
                        to:
                            description: End time for the stat window.
                            example: "2020-04-02T00:00:00Z"
                            format: date-time
                            type: string
                    type: object
                status:
                    description: Status of the request.
                    example: success
                    type: string
            type: object
        StatsSummary:
            properties:
                data:
                    description: The summarized stats data.
                    properties:
                        bandwidth:
                            description: Total bandwidth used in bytes.
                            example: 2.43e+11
                            type: integer
                        errors:
                            description: Total number of errors.
                            example: 15000
                            type: integer
                        hit_ratio:
                            description: Ratio of cache hits to total requests.
                            example: 0.85
                            format: float
                            type: number
                        hits:
                            description: Total number of cache hits.
                            example: 1.275e+07
                            type: integer
                        requests:
                            description: Total number of requests processed.
                            example: 1.5e+07
                            type: integer
                        status_codes:
                            additionalProperties:
                                type: integer
                            description: Breakdown of requests by HTTP status code.
                            example:
                                "200": 1.425e+07
                                "301": 300000
                                "404": 435000
                                "500": 15000
                            type: object
                    type: object
                meta:
                    description: Metadata about the request.
                    properties:
                        from:
                            description: Start time for the stat window.
                            example: "2020-04-01T00:00:00Z"
                            format: date-time
                            type: string
                        to:
                            description: End time for the stat window.
                            example: "2020-04-30T00:00:00Z"
                            format: date-time
                            type: string
                    type: object
                status:
                    description: Status of the request.
                    example: success
                    type: string
            type: object
        TlsActivation:
            properties:
                certificate_id:
                    type: string
                created_at:
                    format: date-time
                    type: string
                domains:
                    items:
                        type: string
                    type: array
                id:
                    type: string
                mutual_authentication_id:
                    type: string
            type: object
        TlsActivationCreate:
            properties:
                certificate_id:
                    type: string
                domains:
                    items:
                        type: string
                    type: array
                mutual_authentication_id:
                    type: string
            required:
                - certificate_id
            type: object
        TlsActivationUpdate:
            properties:
                mutual_authentication_id:
                    type: string
            type: object
        TlsCertificate:
            properties:
                certificate:
                    type: string
                domains:
                    items:
                        type: string
                    type: array
                expires_at:
                    format: date-time
                    type: string
                id:
                    type: string
                issued_at:
                    format: date-time
                    type: string
                name:
                    type: string
                private_key:
                    type: string
            type: object
        TlsCertificateCreate:
            properties:
                certificate:
                    type: string
                domains:
                    items:
                        type: string
                    type: array
                name:
                    type: string
                private_key:
                    type: string
            required:
                - name
                - certificate
                - private_key
            type: object
        TlsCertificateUpdate:
            properties:
                certificate:
                    type: string
                name:
                    type: string
                private_key:
                    type: string
            type: object
        UsageMetrics:
            properties:
                month:
                    type: string
                services:
                    items:
                        $ref: '#/components/schemas/ServiceUsageMetrics'
                    type: array
                total_usage:
                    type: number
                year:
                    type: string
            type: object
        User:
            properties:
                created_at:
                    format: date-time
                    type: string
                customer_id:
                    type: string
                email:
                    type: string
                id:
                    type: string
                login:
                    type: string
                name:
                    type: string
                role:
                    type: string
                updated_at:
                    format: date-time
                    type: string
            type: object
        UserToken:
            properties:
                created_at:
                    format: date-time
                    type: string
                expires_at:
                    format: date-time
                    type: string
                id:
                    type: string
                name:
                    type: string
                scope:
                    type: string
                token:
                    type: string
            type: object
        UserTokenCreate:
            properties:
                expires_at:
                    format: date-time
                    type: string
                name:
                    type: string
                scope:
                    type: string
            required:
                - name
            type: object
        UserUpdate:
            properties:
                email:
                    type: string
                name:
                    type: string
                role:
                    type: string
            type: object
        VCL:
            properties:
                content:
                    description: The VCL code.
                    example: |-
                        vcl 4.0;

                        backend default {
                          .host = "127.0.0.1";
                          .port = "9092";
                        }
                    type: string
                created_at:
                    description: Time-stamp (GMT) when the VCL was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                main:
                    description: Set to true when this is the main VCL, otherwise false.
                    example: true
                    type: boolean
                name:
                    description: The name of this VCL.
                    example: Main VCL
                    type: string
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the VCL was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - name
                - content
            type: object
        VCLCreate:
            properties:
                content:
                    description: The VCL code.
                    example: |-
                        vcl 4.0;

                        backend default {
                          .host = "127.0.0.1";
                          .port = "9092";
                        }
                    type: string
                main:
                    description: Set to true when this is the main VCL, otherwise false.
                    example: true
                    type: boolean
                name:
                    description: The name of this VCL.
                    example: Main VCL
                    type: string
            required:
                - name
                - content
            type: object
        Version:
            properties:
                active:
                    description: Whether this is the active version or not.
                    example: true
                    type: boolean
                created_at:
                    description: Time-stamp (GMT) when the version was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                deployed:
                    description: Whether this version has been deployed or not.
                    example: true
                    type: boolean
                locked:
                    description: Whether this version is locked or not.
                    example: false
                    type: boolean
                number:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                staging:
                    description: Whether this version is for staging or not.
                    example: false
                    type: boolean
                testing:
                    description: Whether this version is for testing or not.
                    example: false
                    type: boolean
                updated_at:
                    description: Time-stamp (GMT) when the version was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
            required:
                - number
                - service_id
                - active
            type: object
        WAF:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the WAF Firewall was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying a WAF Firewall.
                    example: qKJJUh9QpYIdBgFKkRTC3n
                    type: string
                prefetch_condition:
                    description: Name of the corresponding condition object.
                    example: WAF_Condition
                    type: string
                response:
                    description: Name of the corresponding response object.
                    example: WAF_Response
                    type: string
                rule_statuses_log_count:
                    properties:
                        block:
                            description: Number of rules with block status.
                            example: 365
                            type: integer
                        log:
                            description: Number of rules with log status.
                            example: 248
                            type: integer
                        score:
                            description: Number of rules with score status.
                            example: 142
                            type: integer
                    type: object
                service_id:
                    description: Alphanumeric string identifying the service.
                    example: SU1Z0isxPaozGVKXdv0eY
                    type: string
                updated_at:
                    description: Time-stamp (GMT) when the WAF Firewall was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                version:
                    description: Integer identifying a service version.
                    example: 1
                    type: integer
            required:
                - service_id
                - version
                - id
            type: object
        WAFCreate:
            properties:
                prefetch_condition:
                    description: Name of the corresponding condition object.
                    example: WAF_Condition
                    type: string
                response:
                    description: Name of the corresponding response object.
                    example: WAF_Response
                    type: string
            required:
                - prefetch_condition
            type: object
        WAFRule:
            properties:
                created_at:
                    description: Time-stamp (GMT) when the rule was created.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
                id:
                    description: Alphanumeric string identifying a WAF rule.
                    example: L68QKwN8QcmRFjV4y1BuN
                    type: string
                message:
                    description: Rule message.
                    example: SQL Injection Attack Detected via libinjection
                    type: string
                rule_id:
                    description: Corresponding ModSecurity rule ID.
                    example: "942100"
                    type: string
                severity:
                    description: Severity score.
                    example: 3
                    type: integer
                status:
                    description: Rule status.
                    enum:
                        - log
                        - block
                        - score
                    example: log
                    type: string
                tags:
                    description: List of rule tags.
                    example:
                        - application-multi
                        - language-multi
                        - platform-multi
                        - attack-sqli
                    items:
                        type: string
                    type: array
                updated_at:
                    description: Time-stamp (GMT) when the rule was last updated.
                    example: "2016-08-17T19:27:28Z"
                    format: date-time
                    type: string
            required:
                - id
                - rule_id
                - status
            type: object
        WAFRuleUpdate:
            properties:
                status:
                    description: Rule status.
                    enum:
                        - log
                        - block
                        - score
                    example: block
                    type: string
            required:
                - status
            type: object
    securitySchemes:
        ApiKeyAuth:
            description: API token for authentication
            in: header
            name: Fastly-Key
            type: apiKey
externalDocs:
    description: Fastly API Documentation
    url: https://developer.fastly.com/reference/api
info:
    contact:
        email: support@fastly.com
        name: Fastly Support
        url: https://www.fastly.com/support
    description: |
        The Fastly API allows you to manage Fastly services via a REST-like interface.
        This API provides comprehensive control over Fastly CDN services, including configuration management,
        content purging, real-time analytics, and advanced edge computing features.
    license:
        name: MIT
    termsOfService: https://www.fastly.com/terms
    title: Fastly API
    version: "1.0"
openapi: 3.0.3
paths:
    /automation-tokens:
        get:
            description: |
                Retrieves a list of all automation tokens associated with the authenticated account. Automation tokens are service accounts designed for programmatic access and automated workflows.

                **Purpose**: Discover and audit automation tokens for security management, access review, and token lifecycle management.

                **What are automation tokens**:
                - Non-personal API tokens not tied to individual users
                - Designed for CI/CD pipelines, deployment scripts, and automated systems
                - Persist beyond individual user account changes
                - Can be scoped to specific services or operations

                **When to use**:
                - Security audits and access reviews
                - Token lifecycle management
                - Setting up monitoring for token usage
                - Before creating new tokens (check for existing ones)

                **Response includes**:
                - Token ID and name
                - Creation date and expiration
                - Scope and permissions
                - Last used timestamp
                - Associated services

                **Security considerations**:
                - Review tokens regularly for unused or expired entries
                - Monitor token usage for anomalous activity
                - Rotate tokens according to security policies
                - Delete unused tokens to minimize attack surface
            operationId: listAutomationTokens
            parameters:
                - description: Include expired tokens in the response
                  in: query
                  name: include_expired
                  schema:
                    default: false
                    type: boolean
                - description: Filter tokens by scope
                  in: query
                  name: scope
                  schema:
                    enum:
                        - global
                        - service_specific
                        - read_only
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                active_tokens:
                                    summary: List of active automation tokens
                                    value:
                                        - created_at: "2023-01-01T00:00:00Z"
                                          expires_at: "2024-12-31T23:59:59Z"
                                          id: at_1234567890abcdef
                                          last_used_at: "2023-10-15T10:30:00Z"
                                          name: ci-cd-pipeline
                                          scope: service_specific
                                        - created_at: "2023-06-01T12:00:00Z"
                                          expires_at: "2025-06-30T23:59:59Z"
                                          id: at_abcdef1234567890
                                          last_used_at: "2023-10-20T14:15:00Z"
                                          name: monitoring-system
                                          scope: read_only
                            schema:
                                items:
                                    $ref: '#/components/schemas/AutomationToken'
                                type: array
                    description: Successfully retrieved automation tokens
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "403":
                    content:
                        application/json:
                            schema:
                                properties:
                                    msg:
                                        example: Insufficient permissions to access automation tokens
                                        type: string
                                type: object
                    description: Insufficient permissions to list automation tokens
            summary: List all automation tokens
            tags:
                - Authentication
        post:
            description: |
                Creates a new automation token for programmatic access to the Fastly API. Automation tokens are designed for CI/CD systems, deployment pipelines, and other automated workflows.

                **Purpose**: Establish secure, non-personal API access for automated systems and service accounts.

                **Use cases**:
                - CI/CD pipeline authentication
                - Automated deployment scripts
                - Monitoring and alerting systems
                - Infrastructure as Code (IaC) tools
                - Third-party integrations

                **Token characteristics**:
                - Independent of individual user accounts
                - Survive user account changes or departures
                - Can be scoped to specific services or operations
                - Support expiration dates for security
                - Generate audit logs for usage tracking

                **Scoping options**:
                - **global**: Full account access (use sparingly)
                - **service_specific**: Limited to specified services
                - **read_only**: Read operations only (safe for monitoring)
                - **limited**: Custom permission sets

                **Security best practices**:
                - Use least-privilege principle for scoping
                - Set reasonable expiration dates
                - Use descriptive names for token identification
                - Store tokens securely (environment variables, secret managers)
                - Rotate tokens regularly
                - Monitor token usage for anomalies

                **Important**: The token value is only shown once upon creation. Store it securely immediately.
            operationId: createAutomationToken
            requestBody:
                content:
                    application/json:
                        examples:
                            ci_cd_token:
                                summary: CI/CD pipeline token
                                value:
                                    expires_at: "2024-12-31T23:59:59Z"
                                    name: github-actions-deployment
                                    scope: service_specific
                                    services:
                                        - SU1Z0isxPaozGVKXdv0eY
                            emergency_token:
                                summary: Emergency access token
                                value:
                                    expires_at: "2024-01-31T23:59:59Z"
                                    name: emergency-deployment-token
                                    scope: global
                            monitoring_token:
                                summary: Read-only monitoring token
                                value:
                                    expires_at: "2025-06-30T23:59:59Z"
                                    name: datadog-metrics-collector
                                    scope: read_only
                        schema:
                            $ref: '#/components/schemas/AutomationTokenCreate'
                description: Automation token configuration
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            examples:
                                new_token_response:
                                    summary: Newly created token with secret
                                    value:
                                        created_at: "2023-10-20T15:30:00Z"
                                        expires_at: "2024-12-31T23:59:59Z"
                                        id: at_1234567890abcdef
                                        name: github-actions-deployment
                                        scope: service_specific
                                        services:
                                            - SU1Z0isxPaozGVKXdv0eY
                                        token: fa-abc123def456ghi789jkl012mno345pqr678stu901vwx234yz
                            schema:
                                $ref: '#/components/schemas/AutomationToken'
                    description: Automation token created successfully
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "403":
                    content:
                        application/json:
                            schema:
                                properties:
                                    msg:
                                        example: Insufficient permissions to create automation tokens
                                        type: string
                                type: object
                    description: Insufficient permissions to create automation tokens
                "422":
                    content:
                        application/json:
                            schema:
                                properties:
                                    errors:
                                        items:
                                            properties:
                                                field:
                                                    type: string
                                                message:
                                                    type: string
                                            type: object
                                        type: array
                                    msg:
                                        example: Token name must be unique
                                        type: string
                                type: object
                    description: Token validation failed
            summary: Create new automation token
            tags:
                - Authentication
    /content/edge_check:
        get:
            description: Check status of content in each POP's cache
            operationId: checkContentStatus
            parameters:
                - in: query
                  name: url
                  required: true
                  schema:
                    description: URL to check
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContentStatus'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: Check content status
            tags:
                - Utilities
    /current_user:
        get:
            description: Get the current user
            operationId: getCurrentUser
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: Get current user
            tags:
                - Authentication
    /purge/{url}:
        parameters:
            - description: URL to purge (without the scheme)
              in: path
              name: url
              required: true
              schema:
                example: www.example.com/path/to/resource
                type: string
        post:
            description: Purges a specific URL from the Fastly cache. This is the most direct way to remove a single resource from the cache. The URL should be provided without the scheme (http:// or https://). This is a targeted operation that only affects the specified URL and is more efficient than purging all content when only specific resources need to be refreshed.
            operationId: purgeUrl
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PurgeResponse'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Purge URL
            tags:
                - Purge
    /purge/soft:
        post:
            description: Performs a "soft purge" on a specific URL, which expires the content but allows stale content to be served while fresh content is being fetched from the origin. This is useful for high-traffic resources where you want to avoid potential origin overload and maintain some level of performance during purge operations.
            operationId: softPurgeUrl
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                url:
                                    description: URL to soft purge
                                    example: https://www.example.com/path/to/resource
                                    type: string
                            required:
                                - url
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PurgeResponse'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: Soft purge by URL
            tags:
                - Purge
    /service:
        get:
            description: |
                Retrieves a paginated list of all Fastly services configured in the authenticated user's account.

                **Purpose**: Use this endpoint to discover all services you have access to, useful for service management, monitoring dashboards, or iterating through services for batch operations.

                **When to use**:
                - Initial service discovery
                - Building service management interfaces
                - Auditing service configurations
                - Preparing batch operations across multiple services

                **Response**: Returns an array of service objects with basic metadata including service ID, name, creation timestamps, and active version information.

                **Rate limiting**: This endpoint has standard rate limits. For large numbers of services, implement pagination handling.
            operationId: listServices
            parameters:
                - description: Page number for pagination (1-based indexing)
                  in: query
                  name: page
                  schema:
                    default: 1
                    minimum: 1
                    type: integer
                - description: Number of services to return per page (max 100)
                  in: query
                  name: per_page
                  schema:
                    default: 20
                    maximum: 100
                    minimum: 1
                    type: integer
                - description: Field to sort by
                  in: query
                  name: sort
                  schema:
                    default: created
                    enum:
                        - created
                        - updated
                        - name
                    type: string
                - description: Sort direction
                  in: query
                  name: direction
                  schema:
                    default: ascend
                    enum:
                        - ascend
                        - descend
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Service'
                                        type: array
                                    meta:
                                        properties:
                                            current_page:
                                                type: integer
                                            per_page:
                                                type: integer
                                            record_count:
                                                type: integer
                                            total_count:
                                                type: integer
                                        type: object
                                type: object
                    description: Successfully retrieved list of services
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: List all services in account
            tags:
                - Service
        post:
            description: |
                Creates a new Fastly service configuration. A service is the top-level organizational unit in Fastly that contains all configurations for a specific application or website.

                **Purpose**: Establishes a new service container that will hold domains, backends, VCL configurations, caching rules, and other CDN settings.

                **Prerequisites**:
                - Valid API authentication
                - Sufficient account permissions
                - Available service quota in your account

                **Post-creation steps**:
                1. Add domains to the service
                2. Configure backend servers
                3. Set up caching rules and VCL logic
                4. Create and activate a service version

                **Important**: Newly created services are inactive by default. You must configure domains and backends, then activate a version to serve traffic.

                **Service naming**: Choose descriptive names as they appear in the Fastly control panel and logs.
            operationId: createService
            requestBody:
                content:
                    application/json:
                        examples:
                            basic_service:
                                summary: Basic service creation
                                value:
                                    comment: CDN service for my website
                                    name: my-website-cdn
                                    type: vcl
                            ecommerce_service:
                                summary: E-commerce service
                                value:
                                    comment: High-performance CDN for e-commerce API endpoints
                                    name: ecommerce-api-cdn
                                    type: vcl
                        schema:
                            $ref: '#/components/schemas/ServiceCreate'
                description: Service configuration data
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Service created successfully
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "422":
                    content:
                        application/json:
                            schema:
                                properties:
                                    errors:
                                        items:
                                            properties:
                                                field:
                                                    type: string
                                                message:
                                                    type: string
                                            type: object
                                        type: array
                                    msg:
                                        example: Service name must be unique
                                        type: string
                                type: object
                    description: Validation error - invalid service parameters
            summary: Create a new service
            tags:
                - Service
    /service/{service_id}:
        delete:
            description: |
                Permanently and irreversibly deletes a Fastly service and all associated configurations, including all versions, domains, backends, VCL code, and historical data.

                **⚠️ CRITICAL WARNING**: This operation is irreversible and immediately stops all traffic routing through this service.

                **What gets deleted**:
                - All service versions (active and inactive)
                - All configured domains
                - All backend definitions
                - All VCL configurations and snippets
                - All caching rules and headers
                - All logging configurations
                - Historical statistics and logs

                **Prerequisites before deletion**:
                1. Ensure no production traffic depends on this service
                2. Update DNS records to point away from Fastly
                3. Backup any custom VCL or configurations
                4. Notify team members of the deletion
                5. Consider service pausing as an alternative

                **Alternative approaches**:
                - Pause the service instead of deletion (reversible)
                - Remove domains while keeping service configuration
                - Deactivate service version while preserving configuration

                **Post-deletion effects**:
                - All requests to configured domains will fail
                - Service cannot be recovered or restored
                - Service ID becomes invalid for all API operations
                - Billing for this service stops immediately
            operationId: deleteService
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    status:
                                        example: ok
                                        type: string
                                type: object
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Permanently delete service
            tags:
                - Service
        get:
            description: |
                Retrieves comprehensive information about a specific Fastly service, including configuration metadata, version details, and operational status.

                **Purpose**: Use this endpoint to inspect a service's current state, configuration summary, and deployment status before making changes or for monitoring purposes.

                **When to use**:
                - Before modifying service configurations
                - Checking current active version
                - Validating service existence and permissions
                - Gathering service metadata for documentation

                **Response includes**:
                - Service name, ID, and description
                - Active version number and timestamp
                - Creation and last modification dates
                - Customer/account association
                - Service type and paused state

                **Common use cases**:
                - Service configuration auditing
                - Pre-deployment validation
                - Dashboard status displays
                - Automated deployment scripts
            operationId: getService
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                active_service:
                                    summary: Active service with deployed version
                                    value:
                                        active_version:
                                            deployed: true
                                            locked: true
                                            number: 3
                                        comment: Primary CDN for website
                                        created_at: "2023-01-15T10:30:00Z"
                                        customer_id: x4xCwxxJxGCx123Rx5xTx
                                        id: SU1Z0isxPaozGVKXdv0eY
                                        name: my-website-cdn
                                        paused: false
                                        type: vcl
                                        updated_at: "2023-06-20T14:45:00Z"
                                        versions: 5
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully retrieved service details
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get detailed service information
            tags:
                - Service
        parameters:
            - $ref: '#/components/parameters/service_id'
        put:
            description: |
                Updates the metadata and general configuration of an existing service. This endpoint modifies service-level properties but does not affect version-specific configurations.

                **Purpose**: Modify service name, description, or other metadata without affecting the deployed configuration.

                **What can be updated**:
                - Service name (must be unique within account)
                - Service comment/description
                - Customer assignment (if permissions allow)

                **What is NOT updated**:
                - Domains (use version-specific domain endpoints)
                - Backends (use version-specific backend endpoints)
                - VCL configurations (use version-specific VCL endpoints)
                - Active version (use version activation endpoint)

                **Important notes**:
                - Service name changes affect logging and monitoring displays
                - Updates do not require version activation
                - Changes are immediately visible in the control panel

                **Best practices**:
                - Use descriptive names for easier management
                - Update comments when making significant changes
                - Coordinate name changes with team members
            operationId: updateService
            requestBody:
                content:
                    application/json:
                        examples:
                            rename_service:
                                summary: Rename service with updated description
                                value:
                                    comment: Production CDN for main website - updated for new architecture
                                    name: website-cdn-production
                            update_comment:
                                summary: Update service description only
                                value:
                                    comment: CDN service for marketing site - high cache TTL configuration
                        schema:
                            $ref: '#/components/schemas/ServiceUpdate'
                description: Updated service metadata
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Service metadata updated successfully
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
                "422":
                    content:
                        application/json:
                            schema:
                                properties:
                                    msg:
                                        example: Service name must be unique
                                        type: string
                                type: object
                    description: Validation error - invalid service parameters
            summary: Update service metadata
            tags:
                - Service
    /service/{service_id}/domain:
        get:
            description: List all domains for a service
            operationId: listDomains
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Domain'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List domains
            tags:
                - Domain
        parameters:
            - $ref: '#/components/parameters/service_id'
        post:
            description: Create a new domain for a service
            operationId: createDomain
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DomainCreate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Domain'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Create domain
            tags:
                - Domain
    /service/{service_id}/domain/{domain_id}:
        delete:
            description: Delete a specific domain
            operationId: deleteDomain
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    status:
                                        example: ok
                                        type: string
                                type: object
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Delete domain
            tags:
                - Domain
        get:
            description: Get details of a specific domain
            operationId: getDomain
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Domain'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get domain details
            tags:
                - Domain
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/domain_id'
        put:
            description: Update a specific domain
            operationId: updateDomain
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DomainUpdate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Domain'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Update domain
            tags:
                - Domain
    /service/{service_id}/purge:
        parameters:
            - $ref: '#/components/parameters/service_id'
        post:
            description: Purges content from the Fastly cache by cache key or surrogate key. This is a flexible purging mechanism that allows for targeted invalidation of multiple related resources at once using a shared key. This is more efficient than purging individual URLs when groups of content need to be refreshed simultaneously.
            operationId: purgeByKey
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                surrogate_keys:
                                    description: List of surrogate keys to purge
                                    example:
                                        - key1
                                        - key2
                                        - product_id_123
                                    items:
                                        type: string
                                    type: array
                            required:
                                - surrogate_keys
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PurgeResponse'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Purge by key
            tags:
                - Purge
    /service/{service_id}/purge_all:
        parameters:
            - $ref: '#/components/parameters/service_id'
        post:
            description: Immediately purges all cached content for a service across the global Fastly network. This operation is resource-intensive and should be used judiciously. It's useful for emergency situations where stale content must be removed immediately, such as after a significant data update or security incident. For more targeted cache invalidation, use surrogate keys or specific URL purges instead.
            operationId: purgeAll
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    status:
                                        example: ok
                                        type: string
                                type: object
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Purge all content
            tags:
                - Purge
    /service/{service_id}/realtime:
        get:
            description: Streams real-time metrics for a specific service. This endpoint provides up-to-the-second data on cache performance, request rates, and error rates. It's ideal for live dashboards, automated alerting systems, and immediate visibility into the impact of configuration changes or traffic spikes.
            operationId: getRealtimeMetrics
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RealtimeMetrics'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get real-time metrics
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/service_id'
    /service/{service_id}/stats:
        get:
            description: Retrieves detailed statistics for a specific service. This endpoint provides comprehensive time-series data on cache performance, origin shields, and content delivery metrics. Use this for detailed analysis of a service's performance over time, troubleshooting, and capacity planning.
            operationId: getServiceStats
            parameters:
                - description: Timestamp from which to begin gathering stats (UTC)
                  in: query
                  name: from
                  schema:
                    format: date-time
                    type: string
                - description: Timestamp to end gathering stats (UTC)
                  in: query
                  name: to
                  schema:
                    format: date-time
                    type: string
                - description: Duration of sample windows (day, hour, minute)
                  in: query
                  name: by
                  schema:
                    default: day
                    enum:
                        - day
                        - hour
                        - minute
                    type: string
                - description: Filter stats by geographic region
                  in: query
                  name: region
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Stats'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get service stats
            tags:
                - Stats
        parameters:
            - $ref: '#/components/parameters/service_id'
    /service/{service_id}/stats/summary:
        get:
            description: Retrieves a summary of statistics for a specific service. This endpoint returns aggregated data for high-level metrics like hits, misses, and bandwidth usage. It's useful for dashboards that need a quick overview of service performance without the granularity of time-series data.
            operationId: getServiceStatsSummary
            parameters:
                - description: Timestamp from which to begin gathering stats (UTC)
                  in: query
                  name: from
                  schema:
                    format: date-time
                    type: string
                - description: Timestamp to end gathering stats (UTC)
                  in: query
                  name: to
                  schema:
                    format: date-time
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StatsSummary'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get service stats summary
            tags:
                - Stats
        parameters:
            - $ref: '#/components/parameters/service_id'
    /service/{service_id}/version:
        get:
            description: List all versions for a service
            operationId: listVersions
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Version'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List versions
            tags:
                - Version
        parameters:
            - $ref: '#/components/parameters/service_id'
    /service/{service_id}/version/{version_id}:
        get:
            description: Get details of a specific version
            operationId: getVersion
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Version'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get version details
            tags:
                - Version
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
    /service/{service_id}/version/{version_id}/activate:
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        put:
            description: Activates a specific service version, making it the production version that serves live traffic. Once activated, the version becomes locked and cannot be modified further without cloning. This is a critical operation that impacts production traffic, so it should be performed after thorough testing.
            operationId: activateVersion
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Version'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Activate version
            tags:
                - Version
    /service/{service_id}/version/{version_id}/backend:
        get:
            description: List all backends for a service version
            operationId: listBackends
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Backend'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List backends
            tags:
                - Backend
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        post:
            description: Create a new backend for a service version
            operationId: createBackend
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BackendCreate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Backend'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Create backend
            tags:
                - Backend
    /service/{service_id}/version/{version_id}/backend/{backend_name}:
        delete:
            description: Delete a specific backend
            operationId: deleteBackend
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    status:
                                        example: ok
                                        type: string
                                type: object
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Delete backend
            tags:
                - Backend
        get:
            description: Get details of a specific backend
            operationId: getBackend
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Backend'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get backend details
            tags:
                - Backend
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
            - $ref: '#/components/parameters/backend_name'
        put:
            description: Update a specific backend
            operationId: updateBackend
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BackendUpdate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Backend'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Update backend
            tags:
                - Backend
    /service/{service_id}/version/{version_id}/cache_settings:
        get:
            description: List all cache settings for a service version
            operationId: listCacheSettings
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/CacheSetting'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List cache settings
            tags:
                - CacheSettings
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        post:
            description: Create a new cache setting for a service version
            operationId: createCacheSetting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CacheSettingCreate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CacheSetting'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Create cache setting
            tags:
                - CacheSettings
    /service/{service_id}/version/{version_id}/cache_settings/{cache_setting_name}:
        get:
            description: Get a specific cache setting
            operationId: getCacheSetting
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CacheSetting'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Get cache setting
            tags:
                - CacheSettings
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
            - $ref: '#/components/parameters/cache_setting_name'
        put:
            description: Update a specific cache setting
            operationId: updateCacheSetting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CacheSettingUpdate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CacheSetting'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Update cache setting
            tags:
                - CacheSettings
    /service/{service_id}/version/{version_id}/clone:
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        put:
            description: Clone a specific version
            operationId: cloneVersion
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Version'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Clone version
            tags:
                - Version
    /service/{service_id}/version/{version_id}/condition:
        get:
            description: List all conditions for a service version
            operationId: listConditions
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Condition'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List conditions
            tags:
                - VCL
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        post:
            description: Create a new condition
            operationId: createCondition
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConditionCreate'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Condition'
                    description: Created
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: Create condition
            tags:
                - VCL
    /service/{service_id}/version/{version_id}/header:
        get:
            description: List all headers for a service version
            operationId: listHeaders
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Header'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List headers
            tags:
                - VCL
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        post:
            description: Create a new header
            operationId: createHeader
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HeaderCreate'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Header'
                    description: Created
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: Create header
            tags:
                - VCL
    /service/{service_id}/version/{version_id}/vcl:
        get:
            description: List all VCL files for a service version
            operationId: listVcls
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/VCL'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: List VCL files
            tags:
                - VCL
        parameters:
            - $ref: '#/components/parameters/service_id'
            - $ref: '#/components/parameters/version_id'
        post:
            description: Create a new VCL file for a service version
            operationId: createVcl
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VCLCreate'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCL'
                    description: Success
                "400":
                    $ref: '#/components/responses/BadRequest'
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "404":
                    $ref: '#/components/responses/NotFound'
            summary: Create VCL file
            tags:
                - VCL
    /stats:
        get:
            description: Retrieves real-time stats for all services. This endpoint provides aggregated statistics about cache performance, bandwidth usage, and request handling across your entire Fastly account. Use this for global monitoring dashboards and cross-service analysis.
            operationId: getStats
            parameters:
                - description: Timestamp from which to begin gathering stats (UTC)
                  in: query
                  name: from
                  schema:
                    format: date-time
                    type: string
                - description: Timestamp to end gathering stats (UTC)
                  in: query
                  name: to
                  schema:
                    format: date-time
                    type: string
                - description: Duration of sample windows (day, hour, minute)
                  in: query
                  name: by
                  schema:
                    default: day
                    enum:
                        - day
                        - hour
                        - minute
                    type: string
                - description: Filter stats by geographic region
                  in: query
                  name: region
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Stats'
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
                "422":
                    description: Unprocessable Entity - Invalid parameters
            summary: Get real-time stats
            tags:
                - Stats
    /tokens:
        get:
            description: List user tokens
            operationId: listUserTokens
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/UserToken'
                                type: array
                    description: Success
                "401":
                    $ref: '#/components/responses/Unauthorized'
            summary: List user tokens
            tags:
                - Authentication
security:
    - ApiKeyAuth: []
servers:
    - description: Fastly API production server
      url: https://api.fastly.com
